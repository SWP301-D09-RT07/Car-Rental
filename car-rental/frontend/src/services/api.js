import axios from 'axios';
import axiosRetry from 'axios-retry';
import { getToken } from "@/utils/auth"
import { getItem } from "@/utils/auth";

// C·∫•u h√¨nh base URL
const BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8080';

// T·∫°o instance Axios
const api = axios.create({
    baseURL: BASE_URL,
    headers: { 'Content-Type': 'application/json' },
    timeout: 30000, // 30 gi√¢y timeout
});

// C·∫•u h√¨nh retry
axiosRetry(api, {
    retries: 3,
    retryDelay: (retryCount) => retryCount * 1000,
    retryCondition: (error) => error.response?.status === 429 || !error.response,
});

// Cache d√πng Map
const cache = new Map();

// Invalidate cache
const invalidateCache = (key) => {
    cache.delete(key);
};

// Ki·ªÉm tra token h·∫øt h·∫°n
const isTokenExpired = () => {
    const expiresAt = getItem('expiresAt');
    return !expiresAt || new Date().getTime() > parseInt(expiresAt, 10);
};

// Interceptor th√™m token
api.interceptors.request.use(
    async (config) => {
        console.log('[API Request]', config.method?.toUpperCase(), config.url, config.data);
        const token = getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        
        console.log("Final headers:", config.headers);
        console.log("=== END REQUEST INTERCEPTOR ===");
        return config;
    },
    (error) => {
        console.error('[API Request Error]', error);
        return Promise.reject(error);
    }
);

// Interceptor x·ª≠ l√Ω l·ªói
api.interceptors.response.use(
    (response) => {
        console.log('[API Response]', response.status, response.config.url, response.data);
        return response;
    },
    (error) => {
        console.error('[API Response Error]', error.response?.status, error.config?.url, error.message);
        console.log('[API Response Error] Current auth state:');
        console.log('[API Response Error] - Token:', getItem('token') ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('[API Response Error] - Username:', getItem('username'));
        console.log('[API Response Error] - Role:', getItem('role'));
        console.log('[API Response Error] - ExpiresAt:', getItem('expiresAt'));
        
        if (error.response?.status === 401) {

            console.log('[API Response Error] 401 error detected, but not clearing tokens immediately');
            console.log('[API Response Error] Let the calling code handle the 401 error');
            // Kh√¥ng x√≥a token ngay l·∫≠p t·ª©c, ƒë·ªÉ code g·ªçi API x·ª≠ l√Ω
            // localStorage.removeItem('token');
            // localStorage.removeItem('expiresAt');
            // localStorage.removeItem('role');
            // window.location.href = '/login?error=unauthorized';
        }
        return Promise.reject(error);
    }
);

// Interceptor x·ª≠ l√Ω l·ªói
// api.interceptors.response.use(
//     (response) => response,
//     (error) => {
//         if (error.response?.status === 401) {
//             if (!error.config.url.includes('/cars')) {
//                 localStorage.removeItem('token');
//                 localStorage.removeItem('expiresAt');
//                 localStorage.removeItem('role');
//                 window.location.href = '/login?error=unauthorized';
//             }
//         } else if (error.response?.status === 400) {
//             const message = error.response?.data?.message || error.response?.data?.errors?.join(', ') || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá';
//             return Promise.reject(new Error(message));
//         } else if (error.response?.status === 500) {
//             // N√©m l·ªói ƒë·ªÉ component x·ª≠ l√Ω, kh√¥ng chuy·ªÉn h∆∞·ªõng
//             const message = error.response?.data?.message || 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau';
//             return Promise.reject(new Error(message));
//         }
//         return Promise.reject(error);
//     }
// );

// X·ª≠ l√Ω Google login callback
export const handleGoogleLoginCallback = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const expiresAt = urlParams.get('expiresAt');
    const role = urlParams.get('role');
    const error = urlParams.get('error');

    if (error) {
        throw new Error(decodeURIComponent(error) || 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
    }

    if (token && expiresAt) {
        localStorage.setItem('token', token);
        localStorage.setItem('expiresAt', expiresAt);
        localStorage.setItem('role', role || 'customer');
        window.location.href = '/';
        return { token, expiresAt, role };
    }
    throw new Error('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
};

// Qu·∫£n l√Ω x√°c th·ª±c
export const login = async (username, password) => {
    if (!username || !password) throw new Error('Vui l√≤ng cung c·∫•p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u');
    try {
        console.log('[API] Attempting login for username:', username);
        const response = await api.post('/api/auth/login', { username, password });
        return response.data;
    } catch (error) {
        console.error('[API] Login error:', error);
        throw error;
    }
};

export const register = async (userData) => {
    if (!userData.email || !userData.password) throw new Error('Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u');
    try {
        const response = await api.post('/api/auth/register', userData);
        return response.data;
    } catch (error) {
        console.error('[API] Register error:', error.response?.data);
        throw new Error(error.response?.data?.error || error.response?.data?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    }
};

export const checkEmail = async (email) => {
    if (!email) throw new Error('Vui l√≤ng cung c·∫•p email');
    try {
        const response = await api.post('/api/auth/check-email', { email });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Ki·ªÉm tra email th·∫•t b·∫°i');
    }
};

export const resetPassword = async (email, newPassword) => {
    if (!email || !newPassword) throw new Error('Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u m·ªõi');
    try {
        const response = await api.post('/api/auth/reset-password', { email, newPassword });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i');
    }
};

// S·ª≠a changePassword function trong api.js
export const changePassword = async (currentPassword, newPassword) => {
    if (!currentPassword || !newPassword) throw new Error('Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi');

    const payload = { currentPassword, newPassword };
    console.log('üîê Change password payload:', payload);

    try {
        const response = await api.post('/api/users/change-password', payload);
        console.log('‚úÖ Change password success:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Change password error:', error);
        console.error('Error response:', error.response?.data);
        console.error('Error status:', error.response?.status);
        // Handle different error formats from backend
        const errorMessage = error.response?.data?.error ||
            error.response?.data?.message ||
            error.message ||
            'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i';
        throw new Error(errorMessage);
    }
};

export const loginWithGoogle = async () => {
    try {
        window.location.href = `${BASE_URL}/oauth2/authorization/google`;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
    }
};

export const logout = async () => {
    try {
        const response = await api.post('/api/auth/logout');
        localStorage.removeItem('token');
        localStorage.removeItem('expiresAt');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        return response.data;
    } catch (error) {
        localStorage.removeItem('token');
        localStorage.removeItem('expiresAt');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
        throw new Error(error.response?.data?.message || 'ƒêƒÉng xu·∫•t th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ng∆∞·ªùi d√πng
export const getProfile = async () => {
    try {
        console.log('üîÑ Fetching user profile...');
        const response = await api.get('/api/users/profile');
        console.log('‚úÖ Profile fetched successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Profile fetch error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            headers: error.response?.headers,
            message: error.message
        });
        
        // Provide more specific error messages based on status code
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
        } else if (error.response?.status === 500) {
            throw new Error('L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
            throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i');
        }
    }
};

export const updateProfile = async (userData) => {
    if (!userData) throw new Error('Vui l√≤ng cung c·∫•p d·ªØ li·ªáu c·∫≠p nh·∫≠t');
    
    try {
        const response = await api.put('/api/users/profile', userData);
        return response.data;
    } catch (error) {
        console.error('Update profile error:', error);
        // Handle different error formats from backend
        const errorMessage = error.response?.data?.error || 
                            error.response?.data?.message || 
                            error.message || 
                            'C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i';
        throw new Error(errorMessage);
    }
};

export const toggleNotifications = async (userId, enable) => {
    if (!userId) throw new Error('Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng');
    try {
        const response = await api.patch(`/api/users/${userId}/notifications`, { emailNotifications: enable });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ng∆∞·ªùi d√πng (Admin)
export const getUsers = async (page, size, role, status) => {
    try {
        const response = await api.get('/api/users', {
            params: {
                page,
                size,
                role: role || 'all',
                status: status || 'all',
            },
        });
        return response.data; // Tr·∫£ v·ªÅ Page<UserDTO> v·ªõi content, totalPages, v.v.
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th·∫•t b·∫°i');
    }
};

export const toggleUserStatus = async (userId, reason = null) => {
    console.log("=== B·∫ÆT ƒê·∫¶U TOGGLE USER STATUS (FRONTEND) ===");
    console.log("User ID:", userId);
    console.log("Reason:", reason);
    console.log("Current token:", getItem('token'));
    
    try {
        const requestBody = {
            reason: reason
        };
        
        console.log("Request body:", requestBody);
        console.log("API URL:", `/api/users/${userId}/toggle-status`);
        
        const response = await api.put(`/api/users/${userId}/toggle-status`, requestBody, {
            headers: {
                'Content-Type': 'application/json',
            },
        });
        
        console.log("Response status:", response.status);
        console.log("Response data:", response.data);
        console.log("=== K·∫æT TH√öC TOGGLE USER STATUS (FRONTEND) - TH√ÄNH C√îNG ===");
        return response.data; // Tr·∫£ v·ªÅ UserDTO ƒë√£ c·∫≠p nh·∫≠t
    } catch (error) {
        console.error("=== L·ªñI TOGGLE USER STATUS (FRONTEND) ===");
        console.error("User ID:", userId);
        console.error("Reason:", reason);
        console.error("Error object:", error);
        console.error("Error response:", error.response);
        console.error("Error status:", error.response?.status);
        console.error("Error data:", error.response?.data);
        console.error("Error message:", error.message);
        console.error("=== K·∫æT TH√öC L·ªñI TOGGLE USER STATUS (FRONTEND) ===");
        throw new Error(error.response?.data?.message || 'Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω y√™u th√≠ch
export const getFavoriteCars = async () => {
    try {
        console.log('üîÑ Fetching favorite cars...');
        const response = await api.get('/api/users/favorites');
        console.log('‚úÖ Favorite cars fetched:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Fetch favorites error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i xe y√™u th√≠ch');
    }
};
export const addFavorite = async (carId, supplierId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    if (!supplierId) throw new Error('Vui l√≤ng cung c·∫•p ID ch·ªß xe');
    try {
        const response = await api.post('/api/favorites', { carId, supplierId });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Th√™m v√†o y√™u th√≠ch th·∫•t b·∫°i');
    }
};

export const removeFavorite = async (favoriteId) => {
    if (!favoriteId) throw new Error('Vui l√≤ng cung c·∫•p ID y√™u th√≠ch');
    try {
        const response = await api.delete(`/api/favorites/${favoriteId}`);
        invalidateCache('favorites');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'X√≥a kh·ªèi y√™u th√≠ch th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω xe
export const getCars = async (filters = {}) => {
    try {
        const response = await api.get('/api/cars', { params: filters });
        return response.data;
    } catch (error) {
        if (error.message.includes('CORS')) return [];
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe th·∫•t b·∫°i');
    }
};

export const searchCars = async (filters = {}, page = 0, size = 10) => {
    // X√ìA dropoffLocation kh·ªèi filters n·∫øu c√≥
    const { dropoffLocation, ...restFilters } = filters;
    try {
        const params = {
            ...restFilters, 
            page,
            size,
            sort: 'createdAt,desc',
        };

        // Th√™m date filters n·∫øu c√≥
        if (filters.pickupDateTime) {
            params.pickupDateTime = filters.pickupDateTime;
        }
        if (filters.dropoffDateTime) {
            params.dropoffDateTime = filters.dropoffDateTime;
        }

        const response = await api.get('/api/cars/search', { params });
        return response.data;
    } catch (error) {
        if (error.message.includes('CORS')) return { content: [] };
        throw new Error(error.response?.data?.message || 'T√¨m ki·∫øm xe th·∫•t b·∫°i');
    }
};

export const getCarById = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin xe th·∫•t b·∫°i');
    }
};


export const getBookedDates = async (carId) => {
    try {
        const response = await api.get(`/api/cars/${carId}/booked-dates`);
        return response.data;
    } catch (error) {
        console.error('Error fetching booked dates:', error);
        throw new Error(error.response?.data?.message || 'L·∫•y l·ªãch ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};


export const getCarBrands = async () => {
    const cacheKey = 'carBrands';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const token = getToken();
        const response = await api.get('/api/car-brands', {
            headers: token ? { Authorization: `Bearer ${token}` } : {},
        });
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu xe th·∫•t b·∫°i');
    }
};

export const getCarFeatures = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/features`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y t√≠nh nƒÉng xe th·∫•t b·∫°i');
    }
};

export const getCarSpecifications = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/specifications`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng s·ªë k·ªπ thu·∫≠t xe th·∫•t b·∫°i');
    }
};

export const getAdditionalServices = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/service-types', { params: { carId } });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y d·ªãch v·ª• b·ªï sung th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ƒë·ªãa ƒëi·ªÉm
export const getRegions = async () => {
    const cacheKey = 'regions';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const token = getToken();
        const response = await api.get('/api/regions', {
            headers: token ? { Authorization: `Bearer ${token}` } : {},
        });
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ƒë·∫∑t xe
export const createBooking = async (bookingData) => {
    try {
        // Validate booking data
        if (!bookingData.carId) throw new Error('Vui l√≤ng ch·ªçn xe');
        if (!bookingData.pickupDateTime) throw new Error('Vui l√≤ng ch·ªçn th·ªùi gian nh·∫≠n xe');
        if (!bookingData.dropoffDateTime) throw new Error('Vui l√≤ng ch·ªçn th·ªùi gian tr·∫£ xe');
        if (!bookingData.pickupLocation) throw new Error('Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm nh·∫≠n xe');
        if (!bookingData.dropoffLocation) throw new Error('Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm tr·∫£ xe');

        // Validate dates
        const pickupDate = new Date(bookingData.pickupDateTime);
        const dropoffDate = new Date(bookingData.dropoffDateTime);
        const now = new Date();

        if (pickupDate < now) {
            throw new Error('Th·ªùi gian nh·∫≠n xe kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©');
        }

        if (dropoffDate <= pickupDate) {
            throw new Error('Th·ªùi gian tr·∫£ xe ph·∫£i sau th·ªùi gian nh·∫≠n xe');
        }

        // Calculate rental duration in hours
        const durationInHours = (dropoffDate - pickupDate) / (1000 * 60 * 60);
        if (durationInHours < 4) {
            throw new Error('Th·ªùi gian thu√™ t·ªëi thi·ªÉu l√† 4 gi·ªù');
        }
        if (durationInHours > 720) { // 30 days
            throw new Error('Th·ªùi gian thu√™ t·ªëi ƒëa l√† 30 ng√†y');
        }

        // Check if user has reached booking limit
        const userId = getItem('userId');
        if (userId) {
            const userBookings = await getBookingsByUserId(userId);
            const activeBookings = userBookings.filter(b => 
                b.status !== 'CANCELLED' && b.status !== 'COMPLETED'
            );
            if (activeBookings.length >= 10) {
                throw new Error('B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l·∫ßn ƒë·∫∑t xe (t·ªëi ƒëa 3 l·∫ßn)');
            }
        }

        const response = await api.post('/api/bookings', bookingData);
        return response.data;
    } catch (error) {
        if (error.response?.data?.message) {
            throw new Error(error.response.data.message);
        }
        throw error;
    }
};

export const confirmBooking = async (bookingData) => {
    try {
        // Validate confirmation data
        if (!bookingData.bookingId) throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t xe');
        if (!bookingData.contactInfo) throw new Error('Vui l√≤ng cung c·∫•p th√¥ng tin li√™n h·ªá');
        if (!bookingData.paymentMethod) throw new Error('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n');

        // Validate contact info
        const { fullName, phone, email, address } = bookingData.contactInfo;
        if (!fullName) throw new Error('Vui l√≤ng nh·∫≠p h·ªç v√† t√™n');
        if (!phone) throw new Error('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
        if (!email) throw new Error('Vui l√≤ng nh·∫≠p email');
        if (!address) throw new Error('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ');

        // Validate phone number format
        const phoneRegex = /^[0-9]{10,11}$/;
        if (!phoneRegex.test(phone.replace(/\s/g, ''))) {
            throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }

        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            throw new Error('Email kh√¥ng h·ª£p l·ªá');
        }

        // Check if booking is still available
        const booking = await getBookingById(bookingData.bookingId);
        if (booking.status !== 'PENDING') {
            throw new Error('ƒê·∫∑t xe n√†y kh√¥ng c√≤n kh·∫£ d·ª•ng');
        }

        // Check if car is still available for the selected time
        const carBookings = await getBookingsByCarId(booking.carId);
        const isCarAvailable = carBookings.every(b => 
            b.bookingId === bookingData.bookingId || 
            b.status === 'CANCELLED' || 
            b.status === 'COMPLETED' ||
            new Date(b.dropoffDateTime) <= new Date(booking.pickupDateTime) ||
            new Date(b.pickupDateTime) >= new Date(booking.dropoffDateTime)
        );

        if (!isCarAvailable) {
            throw new Error('Xe kh√¥ng c√≤n kh·∫£ d·ª•ng trong kho·∫£ng th·ªùi gian n√†y');
        }

        const response = await api.post('/api/bookings/confirm', bookingData);
        return response.data;
    } catch (error) {
        if (error.response?.data?.message) {
            throw new Error(error.response.data.message);
        }
        throw error;
    }
};

export const getBookingFinancials = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.get(`/api/bookings/${bookingId}/financials`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin t√†i ch√≠nh th·∫•t b·∫°i');
    }
};

export const getPriceBreakdown = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.get(`/api/bookings/${bookingId}/price-breakdown`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin gi√° th·∫•t b·∫°i');
    }
};

export const updateBooking = async (bookingId, bookingData) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.put(`/api/bookings/${bookingId}`, bookingData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

export const cancelBooking = async (bookingId) => {
    try {
        console.log('üîÑ Cancelling booking ID:', bookingId);
        const response = await api.put(`/api/bookings/${bookingId}/cancel`);
        console.log('‚úÖ Booking cancelled successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Cancel booking error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            url: error.config?.url
        });
        
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë·∫∑t xe n√†y.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t xe.');
        } else if (error.response?.status === 400) {
            throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i.');
        } else if (error.response?.status === 500) {
            throw new Error(error.response?.data?.error || 'L·ªói h·ªá th·ªëng khi h·ªßy ƒë·∫∑t xe.');
        } else {
            throw new Error(error.response?.data?.error || 'L·ªói khi h·ªßy ƒë·∫∑t xe');
        }
    }
};

// Qu·∫£n l√Ω khuy·∫øn m√£i
export const applyPromotion = async (promoCode) => {
    if (!promoCode) throw new Error('Vui l√≤ng cung c·∫•p m√£ khuy·∫øn m√£i');
    try {
        const response = await api.post('/api/promotions/apply', { promoCode });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || '√Åp d·ª•ng m√£ khuy·∫øn m√£i th·∫•t b·∫°i');
    }
};

export const getActivePromotions = async () => {
    const cacheKey = 'activePromotions';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/promotions/active');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch m√£ khuy·∫øn m√£i th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω thanh to√°n
export const initiatePayment = async (paymentData) => {
    try {
        const response = await post('/api/payments', paymentData);
        return response;
    } catch (error) {
        console.error('Payment initiation failed:', error);
        throw error;
    }
};

export const processPayment = async (paymentData) => {
    try {
        const response = await post('/api/payments/process', paymentData);
        return response;
    } catch (error) {
        console.error('Payment processing failed:', error);
        throw error;
    }
};

// Qu·∫£n l√Ω b√°o c√°o h∆∞ h·ªèng
export const uploadDamageReport = async (file, description, carId) => {
    if (!file) throw new Error('Vui l√≤ng cung c·∫•p file ƒë·ªÉ upload');
    try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('description', description || '');
        if (carId) formData.append('carId', carId);
        const response = await api.post('/api/images/upload', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Upload b√°o c√°o h∆∞ h·ªèng th·∫•t b·∫°i');
    }
};




// Qu·∫£n l√Ω l·ªãch s·ª≠ thu√™ xe
export const getRentalHistory = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/bookings', {
            params: {
                carId,
                status: 'completed',
                sort: 'createdAt,desc',
            },
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y l·ªãch s·ª≠ thu√™ xe th·∫•t b·∫°i');
    }
};

// L·∫•y l·ªãch s·ª≠ ƒë·∫∑t xe theo user
export const getBookingsByUserId = async (userId) => {
    if (!userId) throw new Error('Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng');
    try {
        const response = await api.get(`/api/bookings/user/${userId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y l·ªãch s·ª≠ ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

// H√†m POST t·ªïng qu√°t
export const post = async (url, data) => {
    try {
        const token = getItem('token');
        const headers = {
            'Content-Type': 'application/json',
            ...(token && { 'Authorization': `Bearer ${token}` })
        };
        
        const response = await api.post(url, data, { headers });
        return response.data;
    } catch (error) {
        console.log('[API Post] Error occurred:', error.response?.status, error.response?.data);
        if (error.response?.status === 401) {
            console.log('[API Post] 401 error detected, but not clearing tokens immediately');
            console.log('[API Post] Let the calling code handle the 401 error');
            // Kh√¥ng x√≥a token ngay l·∫≠p t·ª©c, ƒë·ªÉ code g·ªçi API x·ª≠ l√Ω
            // localStorage.removeItem('token');
            // localStorage.removeItem('expiresAt');
            // localStorage.removeItem('role');
            // window.location.href = '/login?error=unauthorized';
        }
        throw error;
    }
};

// Car APIs
export const getSimilarCars = async (carId, page = 0, size = 4) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/similar`, {
            params: { page, size },
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe t∆∞∆°ng t·ª± th·∫•t b·∫°i');
    }
};

export const getSimilarCarsAdvanced = async (carId, page = 0, size = 4) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/similar-advanced`, {
            params: { page, size },
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe t∆∞∆°ng t·ª± n√¢ng cao th·∫•t b·∫°i');
    }
};

// Test authentication endpoint
export const testAuth = async () => {
    try {
        console.log('üß™ Testing authentication...');
        const response = await api.get('/api/users/profile');
        console.log('‚úÖ Auth test successful:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Auth test failed:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            headers: error.response?.headers
        });
        throw error;
    }
};


export const getUserBookingHistory = async () => {
    try {
        console.log('üîÑ Fetching user booking history...');
        
        // ‚úÖ S·ª¨A: G·ªçi endpoint UserController thay v√¨ BookingController
        const response = await api.get('/api/users/profile/bookings');
        
        console.log('‚úÖ Booking history fetched successfully:', response.data);
        
        // ‚úÖ Debug payment info
        if (response.data.success && response.data.data) {
            console.log(`üìä Total bookings: ${response.data.total}`);
            response.data.data.forEach((booking, index) => {
                console.log(`üìã Booking ${index + 1}:`, {
                    bookingId: booking.bookingId,
                    carModel: booking.carModel,
                    statusName: booking.statusName,
                    paymentStatus: booking.paymentStatus,
                    paymentType: booking.paymentType,
                    paymentAmount: booking.paymentAmount,
                    paymentDate: booking.paymentDate
                });
            });
        }
        
        return response.data;
    } catch (error) {
        console.error('‚ùå Booking history fetch error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            url: error.config?.url,
            message: error.message
        });
        
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
        } else {
            throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i l·ªãch s·ª≠ ƒë·∫∑t xe');
        }
    }
};

// Send email verification
export const sendEmailVerification = async () => {
    try {
        console.log('üîÑ Sending email verification...');
        const response = await api.post('/api/users/send-email-verification');
        console.log('‚úÖ Email verification sent:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Send email verification error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi g·ª≠i email x√°c th·ª±c');
    }
};

// Verify email
export const verifyEmail = async (token) => {
    try {
        console.log('üîÑ Verifying email...');
        const response = await api.post('/api/users/verify-email', { token });
        console.log('‚úÖ Email verified successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Verify email error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi x√°c th·ª±c email');
    }
};
export const getFavorites = async () => {
    const cacheKey = 'favorites';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/favorites');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch y√™u th√≠ch th·∫•t b·∫°i');
    }
};

// Get booking details
export const getBookingDetails = async (bookingId) => {
    try {
        console.log('üîÑ Fetching booking details for ID:', bookingId);
        console.log('üîç Current token:', getItem('token') ? 'Present' : 'Missing');
        console.log('üîç Current role:', getItem('role'));
        
        const response = await api.get(`/api/bookings/${bookingId}`);
        console.log('‚úÖ Booking details fetched:', response.data);
        if (response.data.success && response.data.data) {
            const booking = response.data.data;
            console.log('üí∞ Booking details payment info:', {
                bookingId: booking.bookingId,
                paymentStatus: booking.paymentStatus,
                paymentType: booking.paymentType,
                paymentAmount: booking.paymentAmount,
                paymentDate: booking.paymentDate
            });
        }
        return response.data;
    } catch (error) {
        console.error('‚ùå Fetch booking details error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            url: error.config?.url,
            headers: error.config?.headers
        });
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            const errorData = error.response?.data;
            if (errorData?.code === 'ACCESS_DENIED') {
                throw new Error(errorData.error || 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt ƒë·∫∑t xe n√†y.');
            }
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t xe.');
        } else if (error.response?.status === 500) {
            const errorMsg = error.response?.data?.error || error.response?.data?.message || 'L·ªói h·ªá th·ªëng';
            throw new Error(errorMsg);
        } else {
            throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i chi ti·∫øt ƒë·∫∑t xe');
        }
    }
};

export const filterCars = (filters, page = 0, size = 9, sortBy = "") => {
    const params = { ...filters, page, size };
    if (sortBy) params.sortBy = sortBy;
    
    // Th√™m date filters n·∫øu c√≥
    if (filters.pickupDateTime) {
        params.pickupDateTime = filters.pickupDateTime;
    }
    if (filters.dropoffDateTime) {
        params.dropoffDateTime = filters.dropoffDateTime;
    }
    
    return api.get("/api/cars/filter", { params });
};

export const findCars = async (searchQuery, page = 0, size = 9) => {
    try {
        const token = getToken();
        const response = await api.get('/api/cars/search/keyword', {
            params: {
                searchQuery,
                page,
                size
            },
            headers: token ? { Authorization: `Bearer ${token}` } : {},
        });
        return response.data;
    } catch (error) {
        console.error('Error searching cars:', error);
        throw new Error(error.response?.data?.message || 'T√¨m ki·∫øm xe th·∫•t b·∫°i');
    }
};

/**
 * L·∫•y danh s√°ch xe available theo th·ªùi gian
 * @param {Object} filters - B·ªô l·ªçc bao g·ªìm pickupDateTime, dropoffDateTime
 * @param {number} page - Trang hi·ªán t·∫°i
 * @param {number} size - S·ªë l∆∞·ª£ng xe m·ªói trang
 * @returns {Promise} Danh s√°ch xe available
 */
export const getAvailableCars = async (filters = {}, page = 0, size = 10) => {
    try {
        const params = {
            page,
            size,
            ...filters
        };

        // ƒê·∫£m b·∫£o c√≥ pickupDateTime v√† dropoffDateTime
        if (!params.pickupDateTime || !params.dropoffDateTime) {
            // N·∫øu kh√¥ng c√≥, s·ª≠ d·ª•ng th·ªùi gian m·∫∑c ƒë·ªãnh (hi·ªán t·∫°i + 1 ng√†y)
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            params.pickupDateTime = params.pickupDateTime || now.toISOString();
            params.dropoffDateTime = params.dropoffDateTime || tomorrow.toISOString();
        }

        const response = await api.get('/api/cars/available', { params });
        return response.data;
    } catch (error) {
        console.error('Error fetching available cars:', error);
        if (error.message.includes('CORS')) return { content: [], totalElements: 0, totalPages: 1 };
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe available th·∫•t b·∫°i');
    }
};

export const getBookingById = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.get(`/api/bookings/${bookingId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

export const getBookingByTransactionId = async (transactionId) => {
    if (!transactionId) throw new Error('Vui l√≤ng cung c·∫•p ID giao d·ªãch');
    try {
        const response = await api.get(`/api/bookings/by-payment/${transactionId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin ƒë·∫∑t xe qua ID giao d·ªãch th·∫•t b·∫°i');
    }
};

export const ensureBookingFinancials = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        console.log('[API] Calling ensureBookingFinancials for bookingId:', bookingId);
        console.log('[API] Current token:', getItem('token') ? 'C√≥' : 'Kh√¥ng c√≥');
        const response = await api.post(`/api/bookings/${bookingId}/ensure-financials`);
        console.log('[API] ensureBookingFinancials response:', response.data);
        return response.data;
    } catch (error) {
        console.error('[API] ensureBookingFinancials error:', error.response?.status, error.response?.data);
        throw new Error(error.response?.data?.message || 'ƒê·∫£m b·∫£o th√¥ng tin t√†i ch√≠nh th·∫•t b·∫°i');
    }
}
export const getReportsData = async () => {
    try {
        const response = await api.get('/api/reports/overview');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y d·ªØ li·ªáu b√°o c√°o th·∫•t b·∫°i');
    }
};

export const getMonthlyUserRegistrations = async () => {
    try {
        const response = await api.get('/api/reports/user-registrations');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th·ªëng k√™ ƒëƒÉng k√Ω ng∆∞·ªùi d√πng th·∫•t b·∫°i');
    }
}
// L·∫•y booking g·∫ßn ƒë√¢y nh·∫•t cho dashboard admin
export const getRecentBookings = async (size = 5) => {
    const token = getToken();
    const response = await api.get(`/api/admin/bookings/recent?size=${size}`,
        { headers: token ? { Authorization: `Bearer ${token}` } : {} }
    );
    return response.data;
};

// L·∫•y kh√°ch h√†ng m·ªõi ƒëƒÉng k√Ω theo th√°ng/nƒÉm cho dashboard admin
export const getNewUsersByMonth = async (month, year) => {
    const token = getToken();
    const response = await api.get(`/api/users/new-by-month?month=${month}&year=${year}`,
        { headers: token ? { Authorization: `Bearer ${token}` } : {} }
    );
    return response.data;
};

// L·∫•y user c√≥ booking g·∫ßn ƒë√¢y nh·∫•t cho dashboard admin
export const getRecentBookingUsers = async (size = 5) => {
    const token = getToken();
    const response = await api.get(`/api/users/recent-userbooking?size=${size}`,
        { headers: token ? { Authorization: `Bearer ${token}` } : {} }
    );
    return response.data;
};

// L·∫•y danh s√°ch xe c·ªßa supplier
export const getSupplierCars = async () => {
    const res = await api.get('/api/supplier/cars');
    return res.data;
};

// Th√™m xe m·ªõi cho supplier
export const addSupplierCar = async (carData, images = []) => {
    const formData = new FormData();
    formData.append('carData', JSON.stringify(carData));
    images.forEach(img => formData.append('images', img));
    const token = getItem('token');
    const res = await api.post('/api/supplier/cars', formData, {
        headers: {
            'Content-Type': 'multipart/form-data',
            ...(token && { Authorization: `Bearer ${token}` })
        }
    });
    return res.data;
};

// X√≥a xe c·ªßa supplier
export const deleteSupplierCar = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    const token = getToken?.() || getItem('token');
    const res = await api.delete(`/api/supplier/cars/${carId}`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    return res.data;
};

// C·∫≠p nh·∫≠t xe c·ªßa supplier
export const updateSupplierCar = async (carId, carData) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    const token = getToken?.() || getItem('token');
    const res = await api.put(`/api/supplier/cars/${carId}`, carData, {
        headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    return res.data;
};

// L·∫•y danh s√°ch booking c·ªßa supplier (ƒë√∫ng endpoint backend)
export const getSupplierOrders = async () => {
    const res = await api.get('/api/supplier/bookings');
    return res.data;
};

// Dashboard APIs
export const getSupplierDashboardSummary = async () => {
    const res = await api.get('/api/supplier/dashboard/summary');
    return res.data;
};

export const getSupplierRecentBookings = async () => {
    const res = await api.get('/api/supplier/dashboard/recent-bookings');
    return res.data;
};

export const getSupplierMonthlyStats = async () => {
    const token = getToken?.() || getItem('token');
    const res = await api.get('/api/supplier/dashboard/monthly-stats', {
      headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    return res.data;
  };

export const getNextBookingId = async () => {
    try {
        const response = await api.get('/api/bookings/next-id');
        return response.data.nextBookingId;
    } catch (error) {
        console.error('Error fetching next booking ID:', error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y booking ID ti·∫øp theo');
    }
};

export const getUserById = async (userId) => {
    if (!userId) throw new Error('Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng');
    try {
      const response = await api.get(`/api/users/public/${userId}`);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i');
    }
  };

/**
 * G·ª≠i form ƒëƒÉng k√Ω ch·ªß xe (c√≥ upload file) l√™n backend
 * @param {Object} data - { fullName, idNumber, address, phoneNumber, email, carDocuments, businessLicense, driverLicense }
 * @returns {Promise<any>}
 */
export const createOwnerRegistrationRequest = async (data) => {
    const formData = new FormData();
    formData.append('fullName', data.fullName);
    formData.append('idNumber', data.idNumber);
    formData.append('address', data.address);
    formData.append('phoneNumber', data.phoneNumber);
    formData.append('email', data.email);
    formData.append('password', data.password);
    formData.append('carDocuments', data.carDocuments);
    formData.append('businessLicense', data.businessLicense);
    formData.append('driverLicense', data.driverLicense);
    try {
        const response = await api.post(
            `/api/registration-requests`,
            formData,
            {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            }
        );
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'G·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω ch·ªß xe th·∫•t b·∫°i');
    }
};

//Rating apis

// ...existing code...

// Rating APIs
export const getAllRatings = async () => {
    const cacheKey = 'all-ratings';
    if (cache.has(cacheKey)) {
        return cache.get(cacheKey);
    }
    
    try {
        const response = await api.get('/api/ratings');
        cache.set(cacheKey, response.data);
        setTimeout(() => cache.delete(cacheKey), 60000); // Cache 1 ph√∫t
        return response.data;
    } catch (error) {
        console.error('Error fetching all ratings:', error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë√°nh gi√°');
    }
};

export const getRatingsByCarId = async (carId) => {
    const cacheKey = `ratings-car-${carId}`;
    if (cache.has(cacheKey)) {
        return cache.get(cacheKey);
    }
    
    try {
        const response = await api.get(`/api/ratings?carId=${carId}`);
        cache.set(cacheKey, response.data);
        setTimeout(() => cache.delete(cacheKey), 30000); // Cache 30 gi√¢y
        return response.data;
    } catch (error) {
        console.error(`Error fetching ratings for car ${carId}:`, error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√° c·ªßa xe');
    }
};

export const createRating = async (ratingData) => {
    try {
        const response = await api.post('/api/ratings', ratingData);
        
        // Invalidate cache
        invalidateCache('all-ratings');
        invalidateCache(`ratings-car-${ratingData.carId}`);
        
        return response.data;
    } catch (error) {
        console.error('Error creating rating:', error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë√°nh gi√°');
    }
};

export const updateRating = async (ratingId, ratingData) => {
    try {
        const response = await api.put(`/api/ratings/${ratingId}`, ratingData);
        // Invalidate cache
        invalidateCache('all-ratings');
        if (ratingData.carId) invalidateCache(`ratings-car-${ratingData.carId}`);
        return response.data;
    } catch (error) {
        console.error('Error updating rating:', error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ s·ª≠a ƒë√°nh gi√°');
    }
};

export const getRatingSummaryByCarId = async (carId) => {
    try {
        const response = await api.get(`/api/ratings/summary?carId=${carId}`);
        return response.data;
    } catch (error) {
        console.error(`Error fetching rating summary for car ${carId}:`, error);
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ƒë√°nh gi√°');
    }
};

// ‚úÖ API cho customer confirm
export const confirmDelivery = async (bookingId) => {
    try {
        console.log('üîÑ Confirming delivery for booking:', bookingId);
        const response = await api.put(`/api/bookings/${bookingId}/confirm-delivery`);
        console.log('‚úÖ Delivery confirmed:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Confirm delivery error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n xe');
    }
};

export const confirmReturn = async (bookingId) => {
    try {
        console.log('üîÑ Confirming return for booking:', bookingId);
        const response = await api.put(`/api/bookings/${bookingId}/confirm-return`);
        console.log('‚úÖ Return confirmed:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Confirm return error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫£ xe');
    }
};

// ‚úÖ API cho thanh to√°n ti·ªÅn nh·∫≠n xe
export const createPaymentForPickup = async (bookingId, paymentData) => {
    try {
        console.log('üîÑ Creating pickup payment for booking:', bookingId);
        const response = await api.post(`/api/payments/pickup/${bookingId}`, paymentData);
        console.log('‚úÖ Pickup payment created:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Create pickup payment error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫°o thanh to√°n nh·∫≠n xe');
    }
};

/**
 * Supplier x√°c nh·∫≠n nh·∫≠n l·∫°i xe (k·∫øt th√∫c chuy·∫øn, chu·∫©n b·ªã ho√†n c·ªçc)
 */
export const supplierConfirmReturn = async (bookingId) => {
    try {
        const response = await api.put(`/api/bookings/${bookingId}/supplier-confirm-return`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.error || error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n l·∫°i xe');
    }
};

/**
 * Supplier th·ª±c hi·ªán ho√†n ti·ªÅn c·ªçc cho kh√°ch
 */
export const refundDeposit = async (bookingId) => {
    try {
        const response = await api.post(`/api/payments/refund`, { bookingId });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.error || error.response?.data?.message || 'Kh√¥ng th·ªÉ ho√†n ti·ªÅn c·ªçc');
    }
};

/**
 * L·∫•y t·∫•t c·∫£ payment (admin)
 */
export const getAllPayments = async () => {
    try {
        const response = await api.get('/api/payments');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch payment th·∫•t b·∫°i');
    }
};

/**
 * Admin th·ª±c hi·ªán payout cho supplier
 */
export const payoutSupplier = async (bookingId) => {
    try {
        const response = await api.post('/api/payments/payout', { bookingId });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Chuy·ªÉn ti·ªÅn cho supplier th·∫•t b·∫°i');
    }
};

export const supplierConfirmBooking = async (bookingId) => {
    try {
        const response = await api.put(`/api/supplier/bookings/${bookingId}/confirm`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t xe');
    }
};

export const supplierRejectBooking = async (bookingId) => {
    try {
        const response = await api.put(`/api/supplier/bookings/${bookingId}/reject`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·ª´ ch·ªëi ƒë∆°n ƒë·∫∑t xe');
    }
};

/**
 * Supplier x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë·ªß ti·ªÅn (full_payment)
 */
export const supplierConfirmFullPayment = async (bookingId) => {
    try {
        const response = await api.put(`/api/supplier/bookings/${bookingId}/confirm-full-payment`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë·ªß ti·ªÅn');
    }
};

/**
 * L·∫•y s·ªë ti·ªÅn payout cho supplier c·ªßa 1 booking (ch·ªâ cho admin)
 * @param {number} bookingId
 * @returns {Promise<{payoutAmount: number, currency: string, priceBreakdown: object}>}
 */
export const getPayoutAmount = async (bookingId) => {
  if (!bookingId) throw new Error('Thi·∫øu bookingId');
  try {
    const response = await api.get(`/api/bookings/${bookingId}/payout-amount`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data || error.message || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c payout amount');
  }
};

export const getRatingsByBookingId = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p bookingId');
    try {
        const response = await api.get(`/api/ratings?bookingId=${bookingId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√° theo booking');
    }
};

export default api;

// L·∫•y danh s√°ch xe ch·ªù duy·ªát (admin)
export const getPendingCars = async () => {
  const token = getToken?.() || getItem('token');
  const res = await api.get('/api/cars/admin/pending-cars', {
    headers: token ? { Authorization: `Bearer ${token}` } : {}
  });
  return res.data;
};

// Duy·ªát xe (admin)
export const approveCar = async (carId) => {
  const token = getToken?.() || getItem('token');
  const res = await api.post(`/api/cars/admin/approve-car/${carId}`, {}, {
    headers: token ? { Authorization: `Bearer ${token}` } : {}
  });
  return res.data;
};

// T·ª´ ch·ªëi xe (admin)
export const rejectCar = async (carId) => {
  const token = getToken?.() || getItem('token');
  const res = await api.post(`/api/cars/admin/reject-car/${carId}`, {}, {
    headers: token ? { Authorization: `Bearer ${token}` } : {}
  });
  return res.data;
};

/**
 * Supplier chu·∫©n b·ªã xe (chuy·ªÉn tr·∫°ng th√°i sang ready_for_pickup)
 */
export const supplierPrepareCar = async (bookingId) => {
    try {
        const response = await api.put(`/api/supplier/bookings/${bookingId}/prepare`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ chuy·ªÉn sang tr·∫°ng th√°i ch·ªù nh·∫≠n xe');
    }
};

/**
 * Supplier x√°c nh·∫≠n ƒë√£ giao xe (chuy·ªÉn supplierDeliveryConfirm = true)
 */
export const supplierConfirmDelivery = async (bookingId) => {
    try {
        const response = await api.put(`/api/supplier/bookings/${bookingId}/supplier-delivery-confirm`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n giao xe');
    }
};

/**
 * Cash Payment Management APIs
 */

// L·∫•y danh s√°ch cash payments c·∫ßn x√°c nh·∫≠n
export const getPendingCashPayments = async () => {
    try {
        const response = await api.get('/api/cash-payments/pending');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch thanh to√°n ti·ªÅn m·∫∑t');
    }
};

// X√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn m·∫∑t
export const confirmCashReceived = async (paymentId, confirmationData) => {
    try {
        const response = await api.post(`/api/cash-payments/${paymentId}/confirm`, confirmationData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n ti·ªÅn m·∫∑t');
    }
};

// L·∫•y danh s√°ch platform fees ch∆∞a thanh to√°n
export const getPendingPlatformFees = async () => {
    try {
        const response = await api.get('/api/cash-payments/platform-fees/pending');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√≠ platform');
    }
};

// L·∫•y t·ªïng s·ªë ti·ªÅn platform fee ch∆∞a thanh to√°n
export const getTotalPendingPlatformFees = async () => {
    try {
        const response = await api.get('/api/cash-payments/platform-fees/pending/total');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y t·ªïng ph√≠ platform');
    }
};

// Thanh to√°n platform fee
export const payPlatformFee = async (confirmationId) => {
    try {
        const response = await api.post(`/api/cash-payments/confirmations/${confirmationId}/pay-platform-fee`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ thanh to√°n ph√≠ platform');
    }
};

// Admin: L·∫•y danh s√°ch platform fees qu√° h·∫°n
export const getOverduePlatformFees = async () => {
    try {
        const response = await api.get('/api/cash-payments/platform-fees/overdue');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√≠ qu√° h·∫°n');
    }
};