import axios from 'axios';
import axiosRetry from 'axios-retry';

// C·∫•u h√¨nh base URL
const BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8080';

// T·∫°o instance Axios
const api = axios.create({
    baseURL: BASE_URL,
    headers: { 'Content-Type': 'application/json' },
    timeout: 10000, // 10 gi√¢y timeout
});

// C·∫•u h√¨nh retry
axiosRetry(api, {
    retries: 3,
    retryDelay: (retryCount) => retryCount * 1000,
    retryCondition: (error) => error.response?.status === 429 || !error.response,
});

// Cache d√πng Map
const cache = new Map();

// Invalidate cache
const invalidateCache = (key) => {
    cache.delete(key);
};

// Ki·ªÉm tra token h·∫øt h·∫°n
const isTokenExpired = () => {
    const expiresAt = localStorage.getItem('expiresAt');
    return !expiresAt || new Date().getTime() > parseInt(expiresAt, 10);
};

// Interceptor th√™m token
api.interceptors.request.use(
    async (config) => {
        const token = localStorage.getItem('token');
        const expiresAt = localStorage.getItem('expiresAt');
        
        console.log('üîç API Request:', {
            url: config.url,
            method: config.method,
            hasToken: !!token,
            tokenExpired: isTokenExpired(),
            expiresAt: expiresAt ? new Date(parseInt(expiresAt)).toISOString() : 'N/A',
            currentTime: new Date().toISOString()
        });
        
        if (token && !isTokenExpired()) {
            config.headers.Authorization = `Bearer ${token}`;
            console.log('‚úÖ Token added to request');
        } else if (token) {
            console.warn('‚ö†Ô∏è Token expired, clearing localStorage');
            localStorage.removeItem('token');
            localStorage.removeItem('expiresAt');
            localStorage.removeItem('role');
            localStorage.removeItem('username');
            localStorage.removeItem('userEmail');
            
            // Ch·ªâ reject cho c√°c endpoint c·∫ßn authentication
            const protectedEndpoints = ['/api/users/', '/api/bookings/', '/api/favorites/'];
            const isProtectedEndpoint = protectedEndpoints.some(endpoint => config.url.includes(endpoint));
            
            if (isProtectedEndpoint) {
                return Promise.reject(new Error('Token h·∫øt h·∫°n'));
            }
        }
        return config;
    },
    (error) => Promise.reject(error)
);

// Interceptor x·ª≠ l√Ω l·ªói
api.interceptors.response.use(
    (response) => response,
    (error) => {
        if (error.response?.status === 401) {
            console.warn('‚ö†Ô∏è 401 Unauthorized response received');
            // Don't automatically clear token or redirect - let components handle it
            // Only clear if it's not a cars request (for public access)
            if (!error.config.url.includes('/cars')) {
                console.warn('‚ö†Ô∏è Clearing token due to 401 on protected endpoint');
            }        } else if (error.response?.status === 400) {
            const message = error.response?.data?.message || 
                          error.response?.data?.error || 
                          error.response?.data?.errors?.join(', ') || 
                          'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá';
            return Promise.reject(new Error(message));
        }
        return Promise.reject(error);
    }
);

// X·ª≠ l√Ω Google login callback
export const handleGoogleLoginCallback = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const expiresAt = urlParams.get('expiresAt');
    const role = urlParams.get('role');
    const error = urlParams.get('error');

    if (error) {
        throw new Error(decodeURIComponent(error) || 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
    }

    if (token && expiresAt) {
        localStorage.setItem('token', token);
        localStorage.setItem('expiresAt', expiresAt);
        localStorage.setItem('role', role || 'customer');
        window.location.href = '/';
        return { token, expiresAt, role };
    }
    throw new Error('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
};

// Qu·∫£n l√Ω x√°c th·ª±c
export const login = async (username, password) => {
    if (!username || !password) throw new Error('Vui l√≤ng cung c·∫•p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u');
    try {
        const response = await api.post('/api/auth/login', { username, password });
        if (response.data.token) {
            localStorage.setItem('token', response.data.token);
            localStorage.setItem('expiresAt', response.data.expiresAt);
            localStorage.setItem('role', response.data.role || 'customer');
        }
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }
};

export const register = async (userData) => {
    if (!userData.email || !userData.password) throw new Error('Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u');
    try {
        const response = await api.post('/api/auth/register', userData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    }
};

export const checkEmail = async (email) => {
    if (!email) throw new Error('Vui l√≤ng cung c·∫•p email');
    try {
        const response = await api.post('/api/auth/check-email', { email });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Ki·ªÉm tra email th·∫•t b·∫°i');
    }
};

export const resetPassword = async (email, newPassword) => {
    if (!email || !newPassword) throw new Error('Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u m·ªõi');
    try {
        const response = await api.post('/api/auth/reset-password', { email, newPassword });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i');
    }
};

// S·ª≠a changePassword function trong api.js
export const changePassword = async (currentPassword, newPassword) => {
    if (!currentPassword || !newPassword) throw new Error('Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i v√† m·∫≠t kh·∫©u m·ªõi');

    const payload = { currentPassword, newPassword };
    console.log('üîê Change password payload:', payload);

    try {
        const response = await api.post('/api/users/change-password', payload);
        console.log('‚úÖ Change password success:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Change password error:', error);
        console.error('Error response:', error.response?.data);
        console.error('Error status:', error.response?.status);
        // Handle different error formats from backend
        const errorMessage = error.response?.data?.error ||
            error.response?.data?.message ||
            error.message ||
            'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i';
        throw new Error(errorMessage);
    }
};

export const loginWithGoogle = async () => {
    try {
        window.location.href = `${BASE_URL}/oauth2/authorization/google`;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i');
    }
};

export const logout = async () => {
    try {
        const response = await api.post('/api/auth/logout');
        localStorage.removeItem('token');
        localStorage.removeItem('expiresAt');
        localStorage.removeItem('role');
        return response.data;
    } catch (error) {
        localStorage.removeItem('token');
        localStorage.removeItem('expiresAt');
        localStorage.removeItem('role');
        throw new Error(error.response?.data?.message || 'ƒêƒÉng xu·∫•t th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ng∆∞·ªùi d√πng
export const getProfile = async () => {
    try {
        console.log('üîÑ Fetching user profile...');
        const response = await api.get('/api/users/profile');
        console.log('‚úÖ Profile fetched successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Profile fetch error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            headers: error.response?.headers,
            message: error.message
        });
        
        // Provide more specific error messages based on status code
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
        } else if (error.response?.status === 500) {
            throw new Error('L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
            throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i');
        }
    }
};

export const updateProfile = async (userData) => {
    if (!userData) throw new Error('Vui l√≤ng cung c·∫•p d·ªØ li·ªáu c·∫≠p nh·∫≠t');
    
    try {
        const response = await api.put('/api/users/profile', userData);
        return response.data;
    } catch (error) {
        console.error('Update profile error:', error);
        // Handle different error formats from backend
        const errorMessage = error.response?.data?.error || 
                            error.response?.data?.message || 
                            error.message || 
                            'C·∫≠p nh·∫≠t h·ªì s∆° th·∫•t b·∫°i';
        throw new Error(errorMessage);
    }
};

export const toggleNotifications = async (userId, enable) => {
    if (!userId) throw new Error('Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng');
    try {
        const response = await api.patch(`/api/users/${userId}/notifications`, { emailNotifications: enable });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√¥ng b√°o th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω y√™u th√≠ch
export const getFavorites = async () => {
    const cacheKey = 'favorites';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/favorites');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch y√™u th√≠ch th·∫•t b·∫°i');
    }
};

export const addFavorite = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.post('/api/favorites', { carId });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Th√™m v√†o y√™u th√≠ch th·∫•t b·∫°i');
    }
};

export const removeFavorite = async (favoriteId) => {
    if (!favoriteId) throw new Error('Vui l√≤ng cung c·∫•p ID y√™u th√≠ch');
    try {
        const response = await api.delete(`/api/favorites/${favoriteId}`);
        invalidateCache('favorites');
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'X√≥a kh·ªèi y√™u th√≠ch th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω xe
export const getCars = async (filters = {}) => {
    try {
        const response = await api.get('/api/cars', { params: filters });
        return response.data;
    } catch (error) {
        if (error.message.includes('CORS')) return [];
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe th·∫•t b·∫°i');
    }
};

export const searchCars = async (filters = {}, page = 0, size = 10) => {
    try {
        const response = await api.get('/api/cars/search', { 
            params: { 
                ...filters, 
                page, 
                size,
                sort: 'createdAt,desc'
            } 
        });
        return response.data;
    } catch (error) {
        if (error.message.includes('CORS')) return { content: [] };
        throw new Error(error.response?.data?.message || 'T√¨m ki·∫øm xe th·∫•t b·∫°i');
    }
};

export const getCarById = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin xe th·∫•t b·∫°i');
    }
};

export const getCarBrands = async () => {
    const cacheKey = 'carBrands';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/car-brands');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu xe th·∫•t b·∫°i');
    }
};

export const getCarFeatures = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/features`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y t√≠nh nƒÉng xe th·∫•t b·∫°i');
    }
};

export const getCarSpecifications = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/specifications`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng s·ªë k·ªπ thu·∫≠t xe th·∫•t b·∫°i');
    }
};

export const getAdditionalServices = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/service-types', { params: { carId } });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y d·ªãch v·ª• b·ªï sung th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ƒë·ªãa ƒëi·ªÉm
export const getRegions = async () => {
    const cacheKey = 'regions';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/regions');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ƒë·∫∑t xe
export const createBooking = async (bookingData) => {
    if (!bookingData.carId || !bookingData.pickupDateTime || !bookingData.dropoffDate) {
        throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·∫∑t xe');
    }
    try {
        const response = await api.post('/api/bookings', bookingData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'T·∫°o ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

export const confirmBooking = async (bookingData) => {
    if (!bookingData.carId || !bookingData.pickupLocation || !bookingData.dropoffLocation || !bookingData.pickupDateTime || !bookingData.dropoffDate)
        throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin x√°c nh·∫≠n');
    try {
        const response = await api.post('/api/bookings/confirm', bookingData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'X√°c nh·∫≠n ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

export const getBookingFinancials = async (bookingId) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.get(`/api/bookings/${bookingId}/financials`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y th√¥ng tin t√†i ch√≠nh th·∫•t b·∫°i');
    }
};

export const updateBooking = async (bookingId, bookingData) => {
    if (!bookingId) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe');
    try {
        const response = await api.put(`/api/bookings/${bookingId}`, bookingData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

export const cancelBooking = async (bookingId) => {
    try {
        console.log('üîÑ Cancelling booking ID:', bookingId);
        const response = await api.put(`/api/bookings/${bookingId}/cancel`);
        console.log('‚úÖ Booking cancelled successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Cancel booking error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            url: error.config?.url
        });
        
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë·∫∑t xe n√†y.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t xe.');
        } else if (error.response?.status === 400) {
            throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i.');
        } else if (error.response?.status === 500) {
            throw new Error(error.response?.data?.error || 'L·ªói h·ªá th·ªëng khi h·ªßy ƒë·∫∑t xe.');
        } else {
            throw new Error(error.response?.data?.error || 'L·ªói khi h·ªßy ƒë·∫∑t xe');
        }
    }
};

// Qu·∫£n l√Ω khuy·∫øn m√£i
export const applyPromotion = async (promoCode) => {
    if (!promoCode) throw new Error('Vui l√≤ng cung c·∫•p m√£ khuy·∫øn m√£i');
    try {
        const response = await api.post('/api/promotions/apply', { promoCode });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || '√Åp d·ª•ng m√£ khuy·∫øn m√£i th·∫•t b·∫°i');
    }
};

export const getActivePromotions = async () => {
    const cacheKey = 'activePromotions';
    if (cache.has(cacheKey)) return cache.get(cacheKey);
    try {
        const response = await api.get('/api/promotions/active');
        cache.set(cacheKey, response.data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch m√£ khuy·∫øn m√£i th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω thanh to√°n
export const initiatePayment = async (paymentData) => {
    if (!paymentData.bookingId || !paymentData.amount) throw new Error('Vui l√≤ng cung c·∫•p ID ƒë·∫∑t xe v√† s·ªë ti·ªÅn');
    try {
        const response = await api.post('/api/payments/create', paymentData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Kh·ªüi t·∫°o thanh to√°n th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω b√°o c√°o h∆∞ h·ªèng
export const uploadDamageReport = async (file, description, carId) => {
    if (!file) throw new Error('Vui l√≤ng cung c·∫•p file ƒë·ªÉ upload');
    try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('description', description || '');
        if (carId) formData.append('carId', carId);
        const response = await api.post('/api/images/upload', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'Upload b√°o c√°o h∆∞ h·ªèng th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω ƒë√°nh gi√°
export const getRatingsByCarId = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/ratings', { params: { carId } });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y ƒë√°nh gi√° xe th·∫•t b·∫°i');
    }
};

export const getRatingSummaryByCarId = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/ratings/summary', { params: { carId } });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y t·ªïng quan ƒë√°nh gi√° xe th·∫•t b·∫°i');
    }
};

export const createRating = async (ratingData) => {
    if (!ratingData.carId || !ratingData.rating) throw new Error('Vui l√≤ng cung c·∫•p ID xe v√† ƒë√°nh gi√°');
    try {
        const response = await api.post('/api/ratings', ratingData);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'T·∫°o ƒë√°nh gi√° th·∫•t b·∫°i');
    }
};

export const postReview = async (url, data) => {
    try {
        const response = await api.post(url, data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'G·ª≠i ƒë√°nh gi√° th·∫•t b·∫°i');
    }
};

// Qu·∫£n l√Ω l·ªãch s·ª≠ thu√™ xe
export const getRentalHistory = async (carId) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get('/api/bookings', { 
            params: { 
                carId,
                status: 'completed',
                sort: 'createdAt,desc'
            } 
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y l·ªãch s·ª≠ thu√™ xe th·∫•t b·∫°i');
    }
};

// L·∫•y l·ªãch s·ª≠ ƒë·∫∑t xe theo user
export const getBookingsByUserId = async (userId) => {
    if (!userId) throw new Error('Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng');
    try {
        const response = await api.get(`/api/bookings/user/${userId}`);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y l·ªãch s·ª≠ ƒë·∫∑t xe th·∫•t b·∫°i');
    }
};

// H√†m POST t·ªïng qu√°t
export const post = async (url, data) => {
    try {
        const response = await api.post(url, data);
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i');
    }
};

// Car APIs
export const getSimilarCars = async (carId, page = 0, size = 4) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/similar`, { 
            params: { page, size } 
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe t∆∞∆°ng t·ª± th·∫•t b·∫°i');
    }
};

export const getSimilarCarsAdvanced = async (carId, page = 0, size = 4) => {
    if (!carId) throw new Error('Vui l√≤ng cung c·∫•p ID xe');
    try {
        const response = await api.get(`/api/cars/${carId}/similar-advanced`, { 
            params: { page, size } 
        });
        return response.data;
    } catch (error) {
        throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch xe t∆∞∆°ng t·ª± n√¢ng cao th·∫•t b·∫°i');
    }
};

// Test authentication endpoint
export const testAuth = async () => {
    try {
        console.log('üß™ Testing authentication...');
        const response = await api.get('/api/users/profile');
        console.log('‚úÖ Auth test successful:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Auth test failed:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            headers: error.response?.headers
        });
        throw error;
    }
};


export const getUserBookingHistory = async () => {
    try {
        console.log('üîÑ Fetching user booking history...');
        const response = await api.get('/api/users/profile/bookings');
        console.log('‚úÖ Booking history fetched successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Booking history fetch error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i l·ªãch s·ª≠ ƒë·∫∑t xe');
    }
};

// Send email verification
export const sendEmailVerification = async () => {
    try {
        console.log('üîÑ Sending email verification...');
        const response = await api.post('/api/users/send-email-verification');
        console.log('‚úÖ Email verification sent:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Send email verification error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi g·ª≠i email x√°c th·ª±c');
    }
};

// Verify email
export const verifyEmail = async (token) => {
    try {
        console.log('üîÑ Verifying email...');
        const response = await api.post('/api/users/verify-email', { token });
        console.log('‚úÖ Email verified successfully:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Verify email error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi x√°c th·ª±c email');
    }
};
export const getFavoriteCars = async () => {
    try {
        console.log('üîÑ Fetching favorite cars...');
        const response = await api.get('/api/users/favorites');
        console.log('‚úÖ Favorite cars fetched:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Fetch favorites error:', error.response?.data || error.message);
        throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i xe y√™u th√≠ch');
    }
};

// Get booking details
export const getBookingDetails = async (bookingId) => {
    try {
        console.log('üîÑ Fetching booking details for ID:', bookingId);
        console.log('üîç Current token:', localStorage.getItem('token') ? 'Present' : 'Missing');
        console.log('üîç Current role:', localStorage.getItem('role'));
        
        const response = await api.get(`/api/bookings/${bookingId}`);
        console.log('‚úÖ Booking details fetched:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå Fetch booking details error:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            data: error.response?.data,
            url: error.config?.url,
            headers: error.config?.headers
        });
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
        if (error.response?.status === 401) {
            throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        } else if (error.response?.status === 403) {
            const errorData = error.response?.data;
            if (errorData?.code === 'ACCESS_DENIED') {
                throw new Error(errorData.error || 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt ƒë·∫∑t xe n√†y.');
            }
            throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.');
        } else if (error.response?.status === 404) {
            throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t xe.');
        } else if (error.response?.status === 500) {
            const errorMsg = error.response?.data?.error || error.response?.data?.message || 'L·ªói h·ªá th·ªëng';
            throw new Error(errorMsg);
        } else {
            throw new Error(error.response?.data?.error || 'L·ªói khi t·∫£i chi ti·∫øt ƒë·∫∑t xe');
        }
    }
};


export default api;