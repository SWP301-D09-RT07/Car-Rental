import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '@/store/AuthContext';
import { useNavigate } from 'react-router-dom';
import { 
    getProfile, 
    getUserBookingHistory, 
    updateProfile, 
    changePassword, 
    getFavoriteCars, 
    removeFavorite,
    sendEmailVerification,
    cancelBooking,
    getBookingDetails,
    post, confirmDelivery, confirmReturn,
    createPaymentForPickup,
    getPriceBreakdown,
    getBookingById
} from '@/services/api';
import {
    FaStar,
    FaStarHalf,
    FaRegStar, // Th√™m imports n√†y
} from "react-icons/fa"

import { toast } from 'react-toastify';
import './ProfilePage.scss';
import RetryPaymentHandler from '@/components/features/payments/RetryPaymentHandler';

const StarRating = ({
    rating = 0,
    size = "small",
    interactive = false,
    onRatingChange = null,
    className = ""
}) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStar = 5 - fullStars - (hasHalfStar ? 1 : 0);

    const starSizes = {
        small: "text-sm",
        medium: "text-lg",
        large: "text-xl",
        xlarge: "text-2xl"
    };

    const handleStarClick = (starValue) => {
        if (interactive && onRatingChange) {
            onRatingChange(starValue);
        }
    };

    // Full stars
    for (let i = 0; i < fullStars; i++) {
        stars.push(
            <button
                key={`full-${i}`}
                type="button"
                disabled={!interactive}
                onClick={() => handleStarClick(i + 1)}
                className={`${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'} 
                   transition-all duration-200 ${interactive ? 'p-1 rounded' : ''}`}
            >
                <FaStar className={`text-yellow-400 ${starSizes[size]}`} />
            </button>
        );
    }

    // Half star
    if (hasHalfStar && !interactive) {
        stars.push(
            <FaStarHalf key="half" className={`text-yellow-400 ${starSizes[size]}`} />
        );
    }

    // Empty stars
    for (let i = 0; i < emptyStar; i++) {
        const starIndex = fullStars + (hasHalfStar ? 1 : 0) + i;
        stars.push(
            <button
                key={`empty-${i}`}
                type="button"
                disabled={!interactive}
                onClick={() => handleStarClick(starIndex + 1)}
                className={`${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'} 
                   transition-all duration-200 ${interactive ? 'p-1 rounded' : ''}`}
            >
                <FaRegStar className={`text-gray-300 ${starSizes[size]} ${interactive ? 'hover:text-yellow-400' : ''}`} />
            </button>
        );
    }

    return (
        <div className={`flex items-center ${className}`}>
            {stars}
        </div>
    );
};

const ProfilePage = () => {
    const { user: authUser, updateUser, logout } = useContext(AuthContext);
    const navigate = useNavigate();
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [updating, setUpdating] = useState(false);
    const [activeTab, setActiveTab] = useState('account');
    const [bookings, setBookings] = useState([]);
    const [bookingLoading, setBookingLoading] = useState(false);
    const [favorites, setFavorites] = useState([]);
    const [favoritesLoading, setFavoritesLoading] = useState(false);
    const [isChangingPassword, setIsChangingPassword] = useState(false);
    // Form states
    const [editMode, setEditMode] = useState(false);
    const [formData, setFormData] = useState({
        username: '',
        email: '',
        phone: '',
        countryCode: '+84',
        preferredLanguage: 'vi',
        userDetail: {
            fullName: '',
            address: '',
            taxcode: ''
        }
    });

    
    // Password change states
    // const [showPasswordModal, setShowPasswordModal] = useState(false);
    const [passwordData, setPasswordData] = useState({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });

    // Th√™m states cho modal chi ti·∫øt booking
    const [showBookingModal, setShowBookingModal] = useState(false);
    const [selectedBooking, setSelectedBooking] = useState(null);
    // const [bookingDetails, setBookingDetails] = useState(null);
    // Th√™m state cho review modal
    const [showReviewModal, setShowReviewModal] = useState(false);
    const [reviewBooking, setReviewBooking] = useState(null);
    const [reviewData, setReviewData] = useState({
        rating: 0,
        comment: '',
        isAnonymous: false
    });
    const [showPaymentModal, setShowPaymentModal] = useState(false);
    const [paymentModalData, setPaymentModalData] = useState(null);
    console.log('üîç ProfilePage render - authUser:', authUser, 'user:', user, 'loading:', loading);
   

    const canCustomerConfirmReturn = (booking) => {
        return booking.statusName === 'in progress' &&
            !booking.customerReturnConfirm;
    };
    // ‚úÖ TH√äM: Helper ƒë·ªÉ check c·∫ßn thanh to√°n ti·ªÅn nh·∫≠n xe
    const needsPickupPayment = (booking) => {
        return booking.statusName === 'confirmed' &&
            booking.paymentStatus === 'paid' &&
            booking.hasDeposit && // ƒê√£ c√≥ deposit
            !booking.hasFullPayment; // Ch∆∞a c√≥ full payment
    };
    // ‚úÖ TH√äM: Helper ƒë·ªÉ check ch·ªù nh·∫≠n xe
    const waitingForPickup = (booking) => {
        return booking.statusName === 'confirmed' &&
            booking.paymentStatus === 'paid' &&
            booking.hasFullPayment && // ƒê√£ c√≥ full payment
            !booking.supplierDeliveryConfirm; // Supplier ch∆∞a giao xe
    };
    const canCustomerConfirmDelivery = (booking) => {
        return booking.statusName === 'confirmed' &&
            booking.paymentStatus === 'paid' &&
            booking.hasFullPayment && // ƒê√£ c√≥ full payment
            booking.supplierDeliveryConfirm && // Supplier ƒë√£ x√°c nh·∫≠n giao xe
            !booking.customerReceiveConfirm; // Customer ch∆∞a nh·∫≠n xe
    };
    const COLLATERAL_AMOUNT = 5000000;
    // ‚úÖ TH√äM: Handle thanh to√°n ti·ªÅn nh·∫≠n xe
    const handlePickupPayment = async (booking) => {
        try {
            // L·∫•y booking chi ti·∫øt t·ª´ API (l·∫•y .data n·∫øu c√≥)
            const bookingRes = await getBookingById(booking.bookingId);
            const bookingDetail = bookingRes.data || bookingRes;

            // L·∫•y priceBreakdown t·ª´ API n·∫øu ch∆∞a c√≥
            let priceBreakdown = bookingDetail.priceBreakdown;
            if (!priceBreakdown) {
                priceBreakdown = await getPriceBreakdown(booking.bookingId);
            }

            const deposit = bookingDetail.depositAmount || 0;
            const COLLATERAL_AMOUNT = 5000000;
            const customerInfo = {
                fullName: bookingDetail.customer?.userDetail?.fullName
                    || bookingDetail.customer?.fullName
                    || bookingDetail.customer?.username
                    || '',
                phone: bookingDetail.customer?.phone || '',
                email: bookingDetail.customer?.email || '',
                pickupAddress: bookingDetail.pickupLocation || '',
                dropoffAddress: bookingDetail.dropoffLocation || '',
            };
            const bookingInfo = {
                carId: bookingDetail.carId,
                pickupDateTime: bookingDetail.pickupDateTime,
                dropoffDateTime: bookingDetail.dropoffDateTime,
                pickupLocation: bookingDetail.pickupLocation,
                dropoffLocation: bookingDetail.dropoffLocation,
                seatNumber: bookingDetail.seatNumber,
                withDriver: bookingDetail.withDriver,
                deliveryRequested: bookingDetail.deliveryRequested,
                totalAmount: bookingDetail.totalAmount,
                priceBreakdown: priceBreakdown,
                // ‚úÖ TH√äM: Payment-related fields
                hasDeposit: bookingDetail.hasDeposit,
                hasFullPayment: bookingDetail.hasFullPayment,
                paymentStatus: bookingDetail.paymentStatus,
                paymentType: bookingDetail.paymentType,
                depositAmount: bookingDetail.depositAmount,
            };
            navigate('/payment', {
                state: {
                    bookingId: booking.bookingId,
                    bookingInfo,
                    depositAmount: deposit,
                    collateralAmount: COLLATERAL_AMOUNT,
                    priceBreakdown,
                    customerInfo,
                    withDriver: bookingDetail.withDriver,
                    deliveryRequested: bookingDetail.deliveryRequested,
                    paymentType: 'full_payment',
                    pickupPayment: true
                }
            });
        } catch (err) {
            toast.error('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin gi√° ho·∫∑c booking.');
        }
    };

    const fetchProfile = async () => {
        try {
            console.log('üîÑ Fetching profile...');
            const response = await getProfile();
            console.log('‚úÖ Profile response:', response);
            
            // Check c·∫£ 2 tr∆∞·ªùng h·ª£p response format
            const userData = response.success ? response.data : response;
            
            if (userData && userData.userId) {
                console.log('‚úÖ Setting user state:', userData);
                setUser(userData);
                
                // Set form data for editing
                setFormData({
                    username: userData.username || '',
                    email: userData.email || '',
                    phone: userData.phone || '',
                    countryCode: userData.countryCode || '+84',
                    preferredLanguage: userData.preferredLanguage || 'vi',
                    userDetail: {
                        fullName: userData.userDetail?.fullName || '',
                        address: userData.userDetail?.address || '',
                        taxcode: userData.userDetail?.taxcode || ''
                    }
                });
                
                return userData;
            } else {
                console.error('‚ùå Profile response invalid:', response);
                toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng');
                return null;
            }
        } catch (error) {
            console.error('‚ùå Error fetching profile:', error);
            toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng');
            return null;
        }
    };

    const fetchBookings = async () => {
        try {
            setBookingLoading(true);
            const response = await getUserBookingHistory();
            console.log('‚úÖ Booking response:', response);
            
            if (response.success) {
                // ‚úÖ Debug payment info cho t·ª´ng booking
                response.data.forEach((booking, index) => {
                    console.log(`üìã Booking ${index + 1}:`, {
                        bookingId: booking.bookingId,
                        paymentStatus: booking.paymentStatus,
                        paymentType: booking.paymentType,
                        paymentAmount: booking.paymentAmount,
                        paymentDate: booking.paymentDate
                    });
                });

                setBookings(response.data);
                console.log('‚úÖ Bookings loaded:', response.data);
            }
        } catch (error) {
            console.error('‚ùå Error fetching bookings:', error);
            console.warn('Booking fetch failed, continuing...');
            setBookings([]);
        } finally {
            setBookingLoading(false);
        }
    };

    const fetchFavorites = async () => {
        try {
            setFavoritesLoading(true);
            const response = await getFavoriteCars();
            if (response.success) {
                setFavorites(response.data);
            }
        } catch (error) {
            console.error('‚ùå Error fetching favorites:', error);
            setFavorites([]);
        } finally {
            setFavoritesLoading(false);
        }
    };

    // Handle form changes
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        if (name.startsWith('userDetail.')) {
            const field = name.split('.')[1];
            setFormData(prev => ({
                ...prev,
                userDetail: {
                    ...prev.userDetail,
                    [field]: value
                }
            }));
        } else {
            setFormData(prev => ({
                ...prev,
                [name]: value
            }));
        }
    };

    // Handle profile update
    const handleUpdateProfile = async (e) => {
        e.preventDefault();
        try {
            setUpdating(true);
            console.log('üîÑ Updating profile with data:', formData);
            
            const response = await updateProfile(formData);
            if (response.success) {
                toast.success('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
                setEditMode(false);
                await fetchProfile(); // Refresh data
            } else {
                toast.error(response.error || 'C√≥ l·ªói x·∫£y ra');
            }
        } catch (error) {
            console.error('‚ùå Update profile error:', error);
            toast.error(error.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin');
        } finally {
            setUpdating(false);
        }
    };

    // Handle password change
    const handleChangePassword = async (e) => {
        e.preventDefault();

        // Security validation
        if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {
            toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
            return;
        }

        if (passwordData.newPassword.length < 8) {
            toast.error('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±');
            return;
        }

        if (passwordData.newPassword === passwordData.currentPassword) {
            toast.error('M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i');
            return;
        }

        if (passwordData.newPassword !== passwordData.confirmPassword) {
            toast.error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
            return;
        }

        try {
            setUpdating(true);
            await changePassword(passwordData.currentPassword, passwordData.newPassword);
            setIsChangingPassword(false);
            setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
            toast.success('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng');
        } catch (error) {
            if (error.message.includes('401') || error.message.includes('unauthorized')) {
                toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
                logout();
                navigate('/login');
            } else {
                toast.error(error.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i');
            }
        } finally {
            setUpdating(false);
        }
    };

    // Handle remove favorite
    const handleRemoveFavorite = async (carId) => {
        try {
            const response = await removeFavorite(carId);
            if (response.success) {
                toast.success('ƒê√£ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch');
                setFavorites(prev => prev.filter(car => car.carId !== carId));
            }
        } catch (error) {
            console.error('‚ùå Remove favorite error:', error);
            toast.error('Kh√¥ng th·ªÉ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch');
        }
    };

    // Handle email verification
    const handleSendEmailVerification = async () => {
        try {
            const response = await sendEmailVerification();
            if (response.success) {
                toast.success('Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.');
            }
        } catch (error) {
            console.error('‚ùå Send email verification error:', error);
            toast.error(error.message || 'Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c');
        }
    };



    // Handle cancel booking
const handleCancelBooking = async (bookingId) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t xe n√†y?')) {
        return;
    }

    try {
        console.log('üîÑ Attempting to cancel booking:', bookingId);
        const response = await cancelBooking(bookingId);
        
        if (response.success) {
            toast.success('H·ªßy ƒë·∫∑t xe th√†nh c√¥ng!');
            // Refresh bookings to get updated status
            await fetchBookings();
        } else {
            throw new Error(response.error || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe');
        }
    } catch (error) {
        console.error('‚ùå Cancel booking error:', error);
        
        // Handle specific error cases
        if (error.message.includes('h·∫øt h·∫°n') || error.message.includes('unauthorized')) {
            toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            logout();
            navigate('/login');
        } else if (error.message.includes('kh√¥ng c√≥ quy·ªÅn')) {
            toast.error('B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë·∫∑t xe n√†y.');
        } else if (error.message.includes('tr·∫°ng th√°i')) {
            toast.error('Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i.');
        } else {
            toast.error(error.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe');
        }
    }
};

    // Handle view booking details
    const handleViewBookingDetails = async (booking) => {
        try {
            // ‚úÖ Set booking ngay ƒë·ªÉ show modal v·ªõi loading
            setSelectedBooking(booking);
            setShowBookingModal(true);

            console.log('üîÑ Viewing booking details for:', booking.bookingId);
            
            const response = await getBookingDetails(booking.bookingId);
            if (response.success) {
                console.log('üìã API booking details:', response.data);

                // ‚úÖ UPDATE selectedBooking v·ªõi data ƒë·∫ßy ƒë·ªß
                setSelectedBooking(prev => ({
                    ...prev, // Gi·ªØ data c≈©
                    ...response.data, // Override v·ªõi data m·ªõi
                    // ƒê·∫£m b·∫£o c√°c field quan tr·ªçng
                    carModel: response.data.carModel || prev.carModel,
                    carLicensePlate: response.data.carLicensePlate || prev.carLicensePlate,
                    paymentDetails: response.data.paymentDetails || []
                }));

            } else {
                throw new Error(response.error || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë·∫∑t xe');
            }
        } catch (error) {
            console.error('‚ùå Get booking details error:', error);
            toast.error(error.message || 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë·∫∑t xe');

            // ‚úÖ Reset n·∫øu l·ªói
            setSelectedBooking(null);
            setShowBookingModal(false);
        }
    };
    const handleShowReviewModal = (booking) => {
        setReviewBooking(booking);
        // N·∫øu booking c√≥ ratings[0], ƒëi·ªÅn s·∫µn d·ªØ li·ªáu
        if (booking.ratings && booking.ratings.length > 0) {
            setReviewData({
                rating: booking.ratings[0].ratingScore,
                comment: booking.ratings[0].comment,
                isAnonymous: booking.ratings[0].isAnonymous
            });
        } else {
            setReviewData({ rating: 0, comment: '', isAnonymous: false });
        }
        setShowReviewModal(true);
    };

    // S·ª≠a handleSubmitReview function
    const handleSubmitReview = async () => {
        if (!reviewData.rating || !reviewData.comment.trim()) {
            toast.error("Vui l√≤ng ch·ªçn s·ªë sao v√† nh·∫≠p b√¨nh lu·∫≠n");
            return;
        }

        if (!user || !user.userId) {
            toast.error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng∆∞·ªùi d√πng");
            return;
        }

        try {
            const reviewPayload = {
                bookingId: reviewBooking.bookingId,
                carId: reviewBooking.carId,
                customerId: user.userId, // S·ª≠ d·ª•ng userId thay v√¨ id
                ratingScore: reviewData.rating,
                comment: reviewData.comment.trim(),
                isAnonymous: reviewData.isAnonymous,
                ratingDate: new Date().toISOString()
            };

            console.log('Submitting review:', reviewPayload); // Debug log

            const response = await post('/api/ratings', reviewPayload);

            if (response.success || response) {
                toast.success("ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");

                // Reset v√† ƒë√≥ng modal
                setShowReviewModal(false);
                setReviewData({ rating: 0, comment: '', isAnonymous: false });
                setReviewBooking(null);

                // Refresh booking list ƒë·ªÉ c·∫≠p nh·∫≠t hasRated
                await fetchBookings();
            } else {
                throw new Error(response.error || "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°");
            }
        } catch (error) {
            console.error('Error submitting review:', error);
            toast.error(error.message || "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°");
        }
    };

    // ‚úÖ Handle customer confirm delivery
    const handleConfirmDelivery = async (bookingId) => {
        if (!window.confirm('B·∫°n x√°c nh·∫≠n ƒë√£ nh·∫≠n xe?')) return;

        try {
            console.log('üîÑ Confirming delivery for booking:', bookingId);
            const response = await confirmDelivery(bookingId);

            if (response.success || response.data) {
                toast.success('X√°c nh·∫≠n nh·∫≠n xe th√†nh c√¥ng!');
                await fetchBookings(); // Refresh danh s√°ch
            } else {
                throw new Error(response.error || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n xe');
            }
        } catch (error) {
            console.error('‚ùå Confirm delivery error:', error);
            toast.error(error.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n xe');
        }
    };

    // ‚úÖ Handle customer confirm return
    const handleConfirmReturn = async (bookingId) => {
        if (!window.confirm('B·∫°n x√°c nh·∫≠n ƒë√£ tr·∫£ xe?')) return;

        try {
            console.log('üîÑ Confirming return for booking:', bookingId);
            const response = await confirmReturn(bookingId);

            if (response.success || response.data) {
                toast.success('X√°c nh·∫≠n tr·∫£ xe th√†nh c√¥ng!');
                await fetchBookings(); // Refresh danh s√°ch
            } else {
                throw new Error(response.error || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫£ xe');
            }
        } catch (error) {
            console.error('‚ùå Confirm return error:', error);
            toast.error(error.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫£ xe');
        }
    };

    // ‚úÖ Get status badge class v√† text
    const getStatusInfo = (booking) => {
        let status = booking.statusName?.toLowerCase();
        switch (status) {
            case 'pending':
                return { class: 'pending', text: 'Ch·ªù duy·ªát', color: '#ffa500' };
            case 'confirmed':
                return { class: 'confirmed', text: 'ƒê√£ duy·ªát', color: '#4caf50' };
            case 'rejected':
                return { class: 'rejected', text: 'T·ª´ ch·ªëi', color: '#f44336' };
            case 'in_progress':
                return { class: 'in progress', text: 'ƒêang di·ªÖn ra', color: '#2196f3' };
            case 'completed':
                return { class: 'completed', text: 'Ho√†n th√†nh', color: '#4caf50' };
            case 'cancelled':
                return { class: 'cancelled', text: 'ƒê√£ h·ªßy', color: '#9e9e9e' };
            case 'failed':
                return { class: 'failed', text: 'Thanh to√°n th·∫•t b·∫°i', color: '#f44336' };
            case 'refunded':
                return { class: 'refunded', text: 'ƒê√£ ho√†n c·ªçc', color: '#1976d2' };
            case 'payout':
                // ·∫®n ho·∫∑c hi·ªÉn th·ªã l√† "Ho√†n th√†nh"
                return { class: 'completed', text: 'Ho√†n th√†nh', color: '#4caf50' };
            default:
                return { class: 'unknown', text: status || 'N/A', color: '#9e9e9e' };
        }
    };

    // Load data on mount
    useEffect(() => {
        console.log('üîÑ useEffect triggered - authUser:', authUser);
        
        if (authUser && authUser.username) {
            const loadData = async () => {
                setLoading(true);
                
                const profileData = await fetchProfile();
                console.log('üîç Profile fetch result:', profileData);
                
                if (profileData) {
                    fetchBookings();
                    fetchFavorites();
                    setLoading(false);
                } else {
                    console.error('‚ùå Profile fetch failed, stopping...');
                    setLoading(false);
                }
            };
            
            loadData();
        } else {
            console.log('‚ùå No authUser, setting loading false');
            setLoading(false);
        }
    }, [authUser?.username]);

    // Show loading state
    if (loading) {
        return (
            <div className="profile-page">
                <div className="loading-container">
                    <div className="spinner"></div>
                    <h2>ƒêang t·∫£i th√¥ng tin...</h2>
                    <p>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
                </div>
            </div>
        );
    }

    // Show error state if no user after loading
    if (!user && !loading) {
        return (
            <div className="profile-page">
                <div className="error-container">
                    <i className="fas fa-exclamation-triangle"></i>
                    <h2>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng</h2>
                    <p>C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</p>
                    <div className="error-actions">
                        <button 
                            onClick={() => {
                                setLoading(true);
                                fetchProfile().then(data => {
                                    setLoading(false);
                                    if (!data) {
                                        toast.error('V·∫´n kh√¥ng th·ªÉ t·∫£i th√¥ng tin');
                                    }
                                });
                            }}
                            className="btn primary"
                        >
                            <i className="fas fa-redo"></i>
                            Th·ª≠ l·∫°i
                        </button>
                        <button 
                            onClick={() => window.location.href = '/'}
                            className="btn secondary"
                        >
                            <i className="fas fa-home"></i>
                            V·ªÅ trang ch·ªß
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // Calculate verification percentage
    const calculateVerificationPercentage = () => {
        let completed = 0;
        const total = 5;
        
        if (user.username) completed++;
        if (user.email) completed++;
        if (user.phone) completed++;
        if (user.userDetail?.fullName) completed++;
        if (user.userDetail?.address) completed++;
        
        return Math.round((completed / total) * 100);
    };

    // Render verification status
    const renderVerificationStatus = () => {
        const percentage = calculateVerificationPercentage();
        
        return (
            <div className="verification-status-card">
                <div className="card-header">
                    <h3>Tr·∫°ng th√°i x√°c th·ª±c</h3>
                    <div className="completion-rate">{percentage}% ho√†n th√†nh</div>
                </div>
                
                <div className="verification-items">
                    <div className={`verification-item ${user.email ? 'verified' : 'unverified'}`}>
                        <div className="item-content">
                            <i className="fas fa-envelope"></i>
                            <div>
                                <span className="item-title">Email</span>
                                <span className="item-subtitle">{user.email || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                            </div>
                        </div>
                        {user.email && !user.emailVerified && (
                            <button 
                                className="verify-btn"
                                onClick={handleSendEmailVerification}
                            >
                                X√°c th·ª±c
                            </button>
                        )}
                        {user.emailVerified && (
                            <div className="verified-badge">
                                <i className="fas fa-check-circle"></i>
                                ƒê√£ x√°c th·ª±c
                            </div>
                        )}
                    </div>
                    
                    <div className={`verification-item ${user.phone ? 'verified' : 'unverified'}`}>
                        <div className="item-content">
                            <i className="fas fa-phone"></i>
                            <div>
                                <span className="item-title">S·ªë ƒëi·ªán tho·∫°i</span>
                                <span className="item-subtitle">{user.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                            </div>
                        </div>
                        {user.phone && !user.phoneVerified && (
                            <button className="verify-btn">X√°c th·ª±c</button>
                        )}
                        {user.phoneVerified && (
                            <div className="verified-badge">
                                <i className="fas fa-check-circle"></i>
                                ƒê√£ x√°c th·ª±c
                            </div>
                        )}
                    </div>
                    
                    <div className={`verification-item ${user.userDetail?.fullName ? 'verified' : 'unverified'}`}>
                        <div className="item-content">
                            <i className="fas fa-user"></i>
                            <div>
                                <span className="item-title">H·ªç t√™n</span>
                                <span className="item-subtitle">{user.userDetail?.fullName || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                            </div>
                        </div>
                        {!user.userDetail?.fullName && (
                            <button 
                                className="verify-btn"
                                onClick={() => setEditMode(true)}
                            >
                                C·∫≠p nh·∫≠t
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    };


    // ‚úÖ S·ª¨A: Render booking history v·ªõi logic m·ªõi
    const renderBookingHistory = () => {
        if (bookingLoading) {
            return (
                <div className="loading-container">
                    <div className="spinner"></div>
                    <p>ƒêang t·∫£i l·ªãch s·ª≠ ƒë·∫∑t xe...</p>
                </div>
            );
        }

        if (!bookings || bookings.length === 0) {
            return (
                <div className="empty-state">
                    <i className="fas fa-car"></i>
                    <h3>Ch∆∞a c√≥ l·ªãch s·ª≠ ƒë·∫∑t xe</h3>
                    <p>B·∫°n ch∆∞a c√≥ b·∫•t k·ª≥ chuy·∫øn ƒëi n√†o. H√£y ƒë·∫∑t xe ngay ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh!</p>
                    <button className="btn primary" onClick={handleNavigateToCars}>
                        <i className="fas fa-plus"></i>
                        ƒê·∫∑t xe ngay
                    </button>
                </div>
            );
        }

        return (
            <div className="bookings-list compact">
                {bookings.map((booking, index) => {
                    const statusInfo = getStatusInfo(booking);

                    // Log tr·∫°ng th√°i hi·ªÉn th·ªã
                    console.log('[RENDER] Booking:', {
                        bookingId: booking.bookingId,
                        statusName: booking.statusName,
                        paymentStatus: booking.paymentStatus,
                        paymentAmount: booking.paymentAmount,
                    });

                    return (
                    <div key={booking.bookingId || index} className="booking-card-compact">
                            {/* Log tr·∫°ng th√°i hi·ªÉn th·ªã */}
                            {(() => {
                                console.log('[UI] Render bookingId:', booking.bookingId, 'status:', booking.statusName, 'paymentStatus:', booking.paymentStatus);
                                if (booking.statusName === 'failed') {
                                    console.log('[UI] Booking FAILED, s·∫Ω hi·ªÉn th·ªã tr·∫°ng th√°i th·∫•t b·∫°i v√† n√∫t thanh to√°n l·∫°i');
                                }
                                if (['pending', 'failed'].includes(booking.statusName) && booking.paymentStatus === 'failed') {
                                    console.log('[UI] Hi·ªÉn th·ªã n√∫t Thanh to√°n l·∫°i cho bookingId:', booking.bookingId);
                                }
                            })()}

                            {/* Header */}
                        <div className="booking-compact-header">
                            <div className="booking-main-info">
                                <div className="booking-id-status">
                                    <h4>#{booking.bookingId}</h4>
                                        <div
                                            className={`status-badge ${statusInfo.class}`}
                                            style={{ backgroundColor: statusInfo.color }}
                                        >
                                            {statusInfo.text}
                                            {isBookingFullyCompleted(booking) && (
                                                <span className="badge badge-success" style={{marginLeft: 8}}>ƒê√£ ho√†n th√†nh thanh to√°n</span>
                                            )}
                                            {hasRefund(booking) && (
                                                <span className="badge badge-info" style={{marginLeft: 8}}>ƒê√£ ho√†n c·ªçc</span>
                                            )}
                                    </div>
                                </div>
                                
                                <div className="booking-summary">
                                    <div className="car-summary">
                                        <i className="fas fa-car"></i>
                                        <span>{booking.carModel || 'N/A'} - {booking.carLicensePlate || 'N/A'}</span>
                                    </div>
                                    <div className="date-summary">
                                        <i className="fas fa-calendar"></i>
                                        <span>
                                            {booking.startDate && booking.endDate 
                                                ? `${new Date(booking.startDate).toLocaleDateString('vi-VN')} - ${new Date(booking.endDate).toLocaleDateString('vi-VN')}`
                                                : 'N/A'
                                            }
                                        </span>
                                    </div>
                                        {/* ‚úÖ Hi·ªÉn th·ªã payment info v·ªõi logic m·ªõi */}
                                        <div className="payment-summary">
                                        <i className="fas fa-money-bill-wave"></i>
                                            <div className="payment-info">
                                                <span className={`payment-status ${booking.paymentStatus} ${booking.paymentStatus === 'failed' ? 'bg-red-100 text-red-700' : ''}`}>
                                                    {booking.paymentStatus === 'paid'
                                                        ? 'ƒê√£ thanh to√°n'
                                                        : booking.paymentStatus === 'pending'
                                                            ? 'Ch·ªù thanh to√°n'
                                                            : booking.paymentStatus === 'failed'
                                                                ? 'Thanh to√°n th·∫•t b·∫°i'
                                                                : 'Kh√¥ng x√°c ƒë·ªãnh'}
                                                </span>

                                                {/* ‚úÖ Hi·ªÉn th·ªã th√¥ng tin thanh to√°n chi ti·∫øt */}
                                                {booking.paymentAmount && (
                                                    <div className="payment-breakdown">
                                                        {booking.paymentStatus === 'paid' && (
                                                            <span className="payment-amount">{booking.paymentAmount?.toLocaleString()} ƒë</span>
                                                        )}
                                                        {booking.paymentStatus === 'failed' && (
                                                            <span className="payment-amount text-red-600">0 ƒë</span>
                                                        )}

                                                        {booking.paymentType && (
                                                            <span className="payment-type-badge">
                                                                {booking.paymentType === 'deposit' ? 'C·ªçc' :
                                                                    booking.paymentType === 'full_payment' ? 'To√†n b·ªô' : 'Ho√†n ti·ªÅn'}
                                                            </span>
                                                        )}

                                                        {/* ‚úÖ Hi·ªÉn th·ªã s·ªë ti·ªÅn c√≤n l·∫°i n·∫øu ch·ªâ c√≥ deposit */}
                                                        {booking.paymentType === 'deposit' && booking.totalAmount && (
                                                            <span className="remaining-amount">
                                                                C√≤n l·∫°i: {new Intl.NumberFormat('vi-VN', {
                                                                    style: 'currency',
                                                                    currency: 'VND'
                                                                }).format(booking.totalAmount - booking.paymentAmount)}
                                                            </span>
                                                        )}
                                                    </div>
                                                )}
                                            </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                            {/* ‚úÖ Status Flow Display */}
                            {booking.statusName === 'confirmed' && (
                                <div className="booking-flow-status">
                                    <div className="flow-step">
                                        <div className={`step-indicator ${booking.hasFullPayment ? 'completed' : 'current'}`}>
                                            <i className="fas fa-credit-card"></i>
                                        </div>
                                        <span className="step-label">
                                            {booking.hasFullPayment ? 'ƒê√£ thanh to√°n ƒë·∫ßy ƒë·ªß' : 'C·∫ßn thanh to√°n ti·ªÅn nh·∫≠n xe'}
                                        </span>
                                    </div>

                                    {booking.hasFullPayment && (
                                        <div className="flow-step">
                                            <div className={`step-indicator ${booking.supplierDeliveryConfirm ? 'completed' : 'current'}`}>
                                                <i className="fas fa-truck"></i>
                                            </div>
                                            <span className="step-label">
                                                {booking.supplierDeliveryConfirm ? 'Supplier ƒë√£ giao xe' : 'Ch·ªù supplier giao xe'}
                                            </span>
                                        </div>
                                    )}

                                    {booking.hasFullPayment && booking.supplierDeliveryConfirm && (
                                        <div className="flow-step">
                                            <div className={`step-indicator ${booking.customerReceiveConfirm ? 'completed' : 'current'}`}>
                                                <i className="fas fa-handshake"></i>
                                            </div>
                                            <span className="step-label">
                                                {booking.customerReceiveConfirm ? 'ƒê√£ nh·∫≠n xe' : 'Ch·ªù x√°c nh·∫≠n nh·∫≠n xe'}
                                            </span>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* ‚úÖ In Progress Flow */}
                            {booking.statusName === 'in_progress' && (
                                <div className="booking-flow-status">
                                    <div className="flow-step">
                                        <div className="step-indicator completed">
                                            <i className="fas fa-car"></i>
                                        </div>
                                        <span className="step-label">ƒêang s·ª≠ d·ª•ng xe</span>
                                    </div>

                                    <div className="flow-step">
                                        <div className={`step-indicator ${booking.customerReturnConfirm ? 'completed' : 'current'}`}>
                                            <i className="fas fa-car-side"></i>
                                        </div>
                                        <span className="step-label">
                                            {booking.customerReturnConfirm ? 'ƒê√£ tr·∫£ xe' : 'Ch·ªù tr·∫£ xe'}
                                        </span>
                                    </div>

                                    {booking.customerReturnConfirm && (
                                        <div className="flow-step">
                                            <div className={`step-indicator ${booking.supplierReturnConfirm ? 'completed' : 'current'}`}>
                                                <i className="fas fa-check-circle"></i>
                                            </div>
                                            <span className="step-label">
                                                {booking.supplierReturnConfirm ? 'Supplier ƒë√£ x√°c nh·∫≠n' : 'Ch·ªù supplier x√°c nh·∫≠n'}
                                            </span>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* ‚úÖ Action Buttons v·ªõi logic m·ªõi */}
                        <div className="booking-actions-row">
                            <button 
                                className="btn-action details"
                                onClick={() => handleViewBookingDetails(booking)}
                                title="Xem chi ti·∫øt"
                            >
                                <i className="fas fa-eye"></i>
                                <span>Chi ti·∫øt</span>
                            </button>
                            
                                {/* ‚úÖ N√öT THANH TO√ÅN TI·ªÄN NH·∫¨N XE */}
                                {needsPickupPayment(booking) && (
                                    <button
                                        className="btn-action pickup-payment"
                                        onClick={() => handlePickupPayment(booking)}
                                        title="Thanh to√°n ti·ªÅn nh·∫≠n xe"
                                    >
                                        <i className="fas fa-credit-card"></i>
                                        <span>Thanh to√°n nh·∫≠n xe</span>
                                    </button>
                                )}

                                {/* ‚úÖ N√öT CH·ªú NH·∫¨N XE */}
                                {waitingForPickup(booking) && (
                                    <button
                                        className="btn-action waiting-pickup"
                                        disabled
                                        title="ƒêang ch·ªù supplier giao xe"
                                    >
                                        <i className="fas fa-clock"></i>
                                        <span>Ch·ªù giao xe</span>
                                    </button>
                                )}

                                {/* ‚úÖ N√öT X√ÅC NH·∫¨N NH·∫¨N XE */}
                                {canCustomerConfirmDelivery(booking) && (
                                    <button
                                        className="btn-action confirm-delivery"
                                        onClick={() => handleConfirmDelivery(booking.bookingId)}
                                        title="X√°c nh·∫≠n ƒë√£ nh·∫≠n xe"
                                    >
                                        <i className="fas fa-handshake"></i>
                                        <span>ƒê√£ nh·∫≠n xe</span>
                                    </button>
                                )}

                                {/* ‚úÖ N√öT X√ÅC NH·∫¨N TR·∫¢ XE */}
                                {canCustomerConfirmReturn(booking) && (
                                    <button
                                        className="btn-action confirm-return"
                                        onClick={() => handleConfirmReturn(booking.bookingId)}
                                        title="X√°c nh·∫≠n ƒë√£ tr·∫£ xe"
                                    >
                                        <i className="fas fa-car-side"></i>
                                        <span>ƒê√£ tr·∫£ xe</span>
                                    </button>
                                )}

                                {/* ‚úÖ N√öT H·ª¶Y ƒê·∫∂T XE */}
                            {(booking.statusName === 'confirmed' || booking.statusName === 'pending') && (
                                <button 
                                    className="btn-action cancel"
                                    onClick={() => handleCancelBooking(booking.bookingId)}
                                    title="H·ªßy ƒë·∫∑t xe"
                            >
                                <i className="fas fa-ban"></i>
                                <span>H·ªßy</span>
                            </button>
                            )}
                                {/* N√öT THANH TO√ÅN L·∫†I: Hi·ªÉn th·ªã n·∫øu booking ƒëang pending/failed v√† paymentStatus l√† failed */}
                                {['pending', 'failed'].includes(booking.statusName) && booking.paymentStatus === 'failed' && (
                                    <RetryPaymentHandler
                                        booking={booking}
                                        user={user}
                                        onSuccess={() => {/* callback n·∫øu c·∫ßn */}}
                                        onError={err => {/* callback n·∫øu c·∫ßn */}}
                                    />
                                )}
                                {(['completed', 'refunded', 'payout'].includes(booking.statusName)) && (
                                  <button 
                                    className="btn-action review"
                                    onClick={() => handleShowReviewModal(booking)}
                                    title={booking.hasRated ? "Ch·ªânh s·ª≠a ƒë√°nh gi√°" : "ƒê√°nh gi√° xe"}
                                  >
                                    <i className="fas fa-star"></i>
                                    <span>{booking.hasRated ? "ƒê√°nh gi√° l·∫°i" : "ƒê√°nh gi√°"}</span>
                                  </button>
                                )}
                                {/* N√öT X√ìA: Hi·ªÉn th·ªã n·∫øu booking failed */}
                                {booking.statusName === 'failed' && (
                                    <button
                                        className="btn-action delete"
                                        onClick={async () => {
                                            if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n ƒë·∫∑t xe n√†y kh·ªèi l·ªãch s·ª≠?')) {
                                                try {
                                                    await post(`/api/bookings/${booking.bookingId}/delete`);
                                                    setBookings(prev => prev.filter(b => b.bookingId !== booking.bookingId));
                                                    toast.success('ƒê√£ x√≥a ƒë∆°n ƒë·∫∑t xe kh·ªèi l·ªãch s·ª≠!');
                                                } catch (err) {
                                                    toast.error('Kh√¥ng th·ªÉ x√≥a ƒë∆°n ƒë·∫∑t xe. Vui l√≤ng th·ª≠ l·∫°i.');
                                                }
                                            }
                                        }}
                                        title="X√≥a kh·ªèi l·ªãch s·ª≠"
                                    >
                                        <i className="fas fa-trash"></i>
                                        <span>X√≥a</span>
                                    </button>
                                )}
                        </div>
                    </div>
                    );
                })}
            </div>
        );
    };

    // Render favorites
    const renderFavorites = () => {
        if (favoritesLoading) {
            return (
                <div className="loading-container">
                    <div className="spinner"></div>
                    <p>ƒêang t·∫£i xe y√™u th√≠ch...</p>
                </div>
            );
        }

        if (!favorites || favorites.length === 0) {
            return (
                <div className="empty-state">
                    <i className="fas fa-heart"></i>
                    <h3>Ch∆∞a c√≥ xe y√™u th√≠ch</h3>
                    <p>B·∫°n ch∆∞a th√™m xe n√†o v√†o danh s√°ch y√™u th√≠ch</p>
                    <button className="btn primary" onClick={handleNavigateToCars}>
                        <i className="fas fa-search"></i>
                        T√¨m xe
                    </button>
                </div>
            );
        }

        return (
            <div className="favorites-grid">
                {favorites.map((car, index) => (
                    <div key={car.carId || index} className="favorite-card">
                        <div className="favorite-content">
                            <h4>{car.model}</h4>
                            <p>{car.licensePlate}</p>
                            <p>{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(car.dailyRate)}/ng√†y</p>
                            <button 
                                className="btn primary small"
                                onClick={() => navigate(`/cars/${car.carId}`)}
                            >
                                Xem chi ti·∫øt
                            </button>
                        </div>
                        <button 
                            className="remove-favorite"
                            onClick={() => handleRemoveFavorite(car.carId)}
                        >
                            <i className="fas fa-heart-broken"></i>
                        </button>
                    </div>
                ))}
            </div>
        );
    };

    // Navigate to cars page
    const handleNavigateToCars = () => {
        navigate('/cars');
    };

    // Navigate to booking page
    const handleNavigateToBooking = () => {
        navigate('/booking');
    };

    // Helper ki·ªÉm tra ho√†n t·∫•t booking v√† ho√†n c·ªçc
    const isBookingFullyCompleted = (booking) =>
      Boolean(booking.supplierDeliveryConfirm) &&
      Boolean(booking.customerReceiveConfirm) &&
      Boolean(booking.customerReturnConfirm) &&
      Boolean(booking.supplierReturnConfirm) &&
      booking.paymentDetails?.some(p => p.paymentType === 'full_payment' && p.paymentStatus === 'paid');

    const hasRefund = (booking) =>
      booking.paymentDetails?.some(p => p.paymentType === 'refund' && p.paymentStatus === 'paid');

    return (
        <div className="profile-page">
            {/* Header Section */}
            <div className="profile-header">
                <div className="header-background"></div>
                <div className="container">
                    <div className="header-content">
                        <div className="user-avatar-section">
                            <div className="user-avatar">
                                <img 
                                    src={user.userDetail?.avatar || `data:image/svg+xml,${encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="120" height="120" viewBox="0 0 120 120">
            <rect width="120" height="120" fill="#667eea"/>
            <text x="50%" y="50%" text-anchor="middle" dy="0.35em" font-family="Arial, sans-serif" font-size="48" fill="white">
                ${user.username?.charAt(0).toUpperCase() || 'U'}
            </text>
        </svg>
    `)}`} 
    alt="Avatar"
    onError={(e) => {
        // Fallback to a simple colored div with initial
        e.target.style.display = 'none';
        e.target.parentElement.innerHTML = `
            <div style="
                width: 120px; 
                height: 120px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                border-radius: 50%; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                color: white; 
                font-size: 48px; 
                font-weight: bold;
            ">
                ${user.username?.charAt(0).toUpperCase() || 'U'}
            </div>
        `;
    }}
                                />
                                <div className="avatar-upload" title="ƒê·ªïi ·∫£nh ƒë·∫°i di·ªán">
                                    <i className="fas fa-camera"></i>
                                </div>
                            </div>
                            
                            <div className="verification-badge">
                                <div className="verification-circle">
                                    <svg className="progress-ring" width="60" height="60">
                                        <circle
                                            className="progress-ring-circle"
                                            stroke="#e5e7eb"
                                            strokeWidth="4"
                                            fill="transparent"
                                            r="26"
                                            cx="30"
                                            cy="30"
                                        />
                                        <circle
                                            className="progress-ring-circle"
                                            strokeDasharray={`${calculateVerificationPercentage() * 1.63} 163`}
                                            strokeWidth="4"
                                            fill="transparent"
                                            r="26"
                                            cx="30"
                                            cy="30"
                                        />
                                    </svg>
                                    <div className="percentage">{calculateVerificationPercentage()}%</div>
                                </div>
                                <div className="verification-text">ƒê√£ x√°c th·ª±c</div>
                            </div>
                        </div>
                        
                        <div className="user-info">
                            <h1 className="user-name">{user.userDetail?.fullName || user.username}</h1>
                            <p className="user-email">{user.email}</p>
                            
                            <div className="user-badges">
                                <div className="badge trusted">
                                    <i className="fas fa-shield-alt"></i>
                                    <span>ƒê√°ng tin c·∫≠y</span>
                                </div>
                                {user.roleId === 3 && (
                                    <div className="badge premium">
                                        <i className="fas fa-crown"></i>
                                        <span>Kh√°ch h√†ng</span>
                                    </div>
                                )}
                            </div>
                            
                            <div className="user-stats">
                                <div className="stat-item">
                                    <span className="stat-number">{bookings.length}</span>
                                    <span className="stat-label">
                                        <i className="fas fa-car"></i>
                                        Chuy·∫øn ƒëi
                                    </span>
                                </div>
                                <div className="stat-item">
                                    <span className="stat-number">{favorites.length}</span>
                                    <span className="stat-label">
                                        <i className="fas fa-heart"></i>
                                        Y√™u th√≠ch
                                    </span>
                                </div>
                                <div className="stat-item">
                                    <span className="stat-number">{calculateVerificationPercentage()}%</span>
                                    <span className="stat-label">
                                        <i className="fas fa-check-circle"></i>
                                        Ho√†n th√†nh
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                        <div className="header-actions">
                            <button className="book-car-btn" onClick={handleNavigateToCars}>
                                <div className="btn-glow"></div>
                                <span>
                                    <i className="fas fa-plus"></i>
                                    ƒê·∫∑t xe m·ªõi
                                </span>
                            </button>
                            <button className="btn invite-btn">
                                <i className="fas fa-user-plus"></i>
                                M·ªùi b·∫°n b√®
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Navigation */}
            <div className="profile-nav">
                <div className="container">
                    <div className="nav-tabs">
                        <button 
                            className={`nav-tab ${activeTab === 'account' ? 'active' : ''}`}
                            onClick={() => setActiveTab('account')}
                        >
                            <i className="fas fa-user"></i>
                            <span>Th√¥ng tin t√†i kho·∫£n</span>
                        </button>
                        <button 
                            className={`nav-tab ${activeTab === 'bookings' ? 'active' : ''}`}
                            onClick={() => setActiveTab('bookings')}
                        >
                            <i className="fas fa-history"></i>
                            <span>L·ªãch s·ª≠ ƒë·∫∑t xe</span>
                            {bookings.length > 0 && (
                                <div className="notification-dot">{bookings.length}</div>
                            )}
                        </button>
                        <button 
                            className={`nav-tab ${activeTab === 'favorites' ? 'active' : ''}`}
                            onClick={() => setActiveTab('favorites')}
                        >
                            <i className="fas fa-heart"></i>
                            <span>Xe y√™u th√≠ch</span>
                            {favorites.length > 0 && (
                                <div className="notification-dot">{favorites.length}</div>
                            )}
                        </button>
                        <button 
                            className={`nav-tab ${activeTab === 'security' ? 'active' : ''}`}
                            onClick={() => setActiveTab('security')}
                        >
                            <i className="fas fa-shield-alt"></i>
                            <span>B·∫£o m·∫≠t</span>
                        </button>
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="profile-content">
                <div className="container">
                    <div className="tab-content">
                        {activeTab === 'account' && (
                            <>
                                <div className="content-header">
                                    <div>
                                        <p className="subtitle">Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† c√†i ƒë·∫∑t t√†i kho·∫£n</p>
                                    </div>
                                    <button 
                                        className="btn edit-btn"
                                        onClick={() => setEditMode(!editMode)}
                                    >
                                        <i className={`fas fa-${editMode ? 'times' : 'edit'}`}></i>
                                        {editMode ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
                                    </button>
                                </div>

                                {renderVerificationStatus()}

                                {editMode ? (
                                    <form onSubmit={handleUpdateProfile} className="form-grid">
                                        <div className="form-card">
                                            <h3>Th√¥ng tin c∆° b·∫£n</h3>
                                            <div className="form-rows">
                                                <div className="form-group">
                                                    <label data-required="true">T√™n ƒëƒÉng nh·∫≠p</label>
                                                    <input
                                                        type="text"
                                                        name="username"
                                                        value={formData.username}
                                                        onChange={handleInputChange}
                                                        disabled
                                                    />
                                                    <div className="input-hint">T√™n ƒëƒÉng nh·∫≠p kh√¥ng th·ªÉ thay ƒë·ªïi</div>
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label data-required="true">Email</label>
                                                    <input
                                                        type="email"
                                                        name="email"
                                                        value={formData.email}
                                                        onChange={handleInputChange}
                                                        required
                                                    />
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label data-required="true">S·ªë ƒëi·ªán tho·∫°i</label>
                                                    <div className="phone-input-group">
                                                        <select 
                                                            className="country-select"
                                                            name="countryCode"
                                                            value={formData.countryCode}
                                                            onChange={handleInputChange}
                                                        >
                                                            <option value="+84">+84 (VN)</option>
                                                            <option value="+1">+1 (US)</option>
                                                            <option value="+86">+86 (CN)</option>
                                                        </select>
                                                        <input
                                                            type="tel"
                                                            name="phone"
                                                            value={formData.phone}
                                                            onChange={handleInputChange}
                                                            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                                            required
                                                        />
                                                    </div>
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label>Ng√¥n ng·ªØ ∆∞a th√≠ch</label>
                                                    <select
                                                        name="preferredLanguage"
                                                        value={formData.preferredLanguage}
                                                        onChange={handleInputChange}
                                                    >
                                                        <option value="vi">Ti·∫øng Vi·ªát</option>
                                                        <option value="en">English</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div className="form-card">
                                            <h3>Th√¥ng tin chi ti·∫øt</h3>
                                            <div className="form-rows">
                                                <div className="form-group">
                                                    <label data-required="true">H·ªç v√† t√™n</label>
                                                    <input
                                                        type="text"
                                                        name="userDetail.fullName"
                                                        value={formData.userDetail.fullName}
                                                        onChange={handleInputChange}
                                                        placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                                                        required
                                                    />
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label data-required="true">ƒê·ªãa ch·ªâ</label>
                                                    <textarea
                                                        name="userDetail.address"
                                                        value={formData.userDetail.address}
                                                        onChange={handleInputChange}
                                                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                                                        rows="3"
                                                        required
                                                    />
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label>M√£ s·ªë thu·∫ø (n·∫øu c√≥)</label>
                                                    <input
                                                        type="text"
                                                        name="userDetail.taxcode"
                                                        value={formData.userDetail.taxcode}
                                                        onChange={handleInputChange}
                                                        placeholder="Nh·∫≠p m√£ s·ªë thu·∫ø"
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div className="form-actions">
                                            <button type="button" className="btn secondary" onClick={() => setEditMode(false)}>
                                                <i className="fas fa-times"></i>
                                                H·ªßy
                                            </button>
                                            <button type="submit" className="btn save-btn" disabled={updating}>
                                                <i className="fas fa-save"></i>
                                                {updating ? 'ƒêang l∆∞u...' : 'L∆∞u thay ƒë·ªïi'}
                                            </button>
                                        </div>
                                    </form>
                                ) : (
                                    <div className="info-grid">
                                        <div className="info-card">
                                            <h3>Th√¥ng tin c∆° b·∫£n</h3>
                                            <div className="info-rows">
                                                <div className="info-row">
                                                    <label>T√™n ƒëƒÉng nh·∫≠p:</label>
                                                    <span>{user.username}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>Email:</label>
                                                    <span>{user.email}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                                    <span>{user.phone}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>Ng√¥n ng·ªØ:</label>
                                                    <span>{user.preferredLanguage === 'vi' ? 'Ti·∫øng Vi·ªát' : 'English'}</span>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div className="info-card">
                                            <h3>Th√¥ng tin chi ti·∫øt</h3>
                                            <div className="info-rows">
                                                <div className="info-row">
                                                    <label>H·ªç v√† t√™n:</label>
                                                    <span>{user.userDetail?.fullName || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>ƒê·ªãa ch·ªâ:</label>
                                                    <span>{user.userDetail?.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>M√£ s·ªë thu·∫ø:</label>
                                                    <span>{user.userDetail?.taxcode || 'Ch∆∞a c√≥'}</span>
                                                </div>
                                                <div className="info-row">
                                                    <label>Ng√†y t·∫°o t√†i kho·∫£n:</label>
                                                    <span>
                                                        {user.createdAt ? new Date(user.createdAt).toLocaleDateString('vi-VN') : 'N/A'}
                                                    </span>
                                                </div>
                                                <div className="info-row">
                                                    <label>ƒêƒÉng nh·∫≠p cu·ªëi:</label>
                                                    <span>
                                                        {user.lastLogin ? new Date(user.lastLogin).toLocaleDateString('vi-VN') : 'N/A'}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </>
                        )}

                        {activeTab === 'bookings' && (
                            <>

                                {renderBookingHistory()}
                            </>
                        )}

                        {activeTab === 'favorites' && (
                            <>
                                <div className="content-header">
                                    <div>
                                        <h2>Xe y√™u th√≠ch</h2>
                                        <p className="subtitle">Nh·ªØng chi·∫øc xe b·∫°n ƒë√£ l∆∞u ƒë·ªÉ thu√™ sau</p>
                                    </div>
                                </div>
                                {renderFavorites()}
                            </>
                        )}

                        {activeTab === 'security' && (
                            <>
                                <div className="content-header">
                                    <div>
                                        <h2>B·∫£o m·∫≠t & Ri√™ng t∆∞</h2>
                                        <p className="subtitle">Qu·∫£n l√Ω m·∫≠t kh·∫©u v√† c√†i ƒë·∫∑t b·∫£o m·∫≠t</p>
                                    </div>
                                </div>
                                
                                <div className="security-grid">
                                    <div className="security-card">
                                        <div className="security-header">
                                            <h3>M·∫≠t kh·∫©u</h3>
                                            <div className="status active">ƒê√£ thi·∫øt l·∫≠p</div>
                                        </div>
                                        <p>Thay ƒë·ªïi m·∫≠t kh·∫©u th∆∞·ªùng xuy√™n ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n</p>
                                        <button 
                                            className="btn primary"
                                            // onClick={() => setShowPasswordModal(true)}
                                            onClick={() => setIsChangingPassword(true)}
                                        >
                                            <i className="fas fa-key"></i>
                                            ƒê·ªïi m·∫≠t kh·∫©u
                                        </button>
                                    </div>
                                    
                                    <div className="security-card">
                                        <div className="security-header">
                                            <h3>X√°c th·ª±c 2 l·ªõp</h3>
                                            <div className="status">Ch∆∞a b·∫≠t</div>
                                        </div>
                                        <p>TƒÉng c∆∞·ªùng b·∫£o m·∫≠t v·ªõi x√°c th·ª±c 2 l·ªõp</p>
                                        <button className="btn secondary">
                                            <i className="fas fa-shield-alt"></i>
                                            Thi·∫øt l·∫≠p
                                        </button>
                                    </div>
                                </div>
                            </>
                        )}
                    </div>
                </div>
            </div>

            {/* Password Change Modal */}
            {isChangingPassword && (
                <div className="modal-overlay">
                    <div className="modal">
                        <div className="modal-header">
                            <h3>ƒê·ªïi m·∫≠t kh·∫©u</h3>
                            <button
                                className="close-btn"
                                onClick={() => {
                                    setIsChangingPassword(false);
                                    setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
                                }}
                            >
                                √ó
                            </button>
                        </div>
                        <form onSubmit={handleChangePassword} className="modal-form">
                            <div className="form-group">
                                <label>M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
                                <input
                                    type="password"
                                    value={passwordData.currentPassword}
                                    onChange={(e) => setPasswordData(prev => ({
                                        ...prev, currentPassword: e.target.value
                                    }))}
                                    required
                                />
                            </div>
                            <div className="form-group">
                                <label>M·∫≠t kh·∫©u m·ªõi</label>
                                <input
                                    type="password"
                                    value={passwordData.newPassword}
                                    onChange={(e) => setPasswordData(prev => ({
                                        ...prev, newPassword: e.target.value
                                    }))}
                                    required
                                    minLength="8"
                                />
                                <small>M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±</small>
                            </div>
                            <div className="form-group">
                                <label>X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                                <input
                                    type="password"
                                    value={passwordData.confirmPassword}
                                    onChange={(e) => setPasswordData(prev => ({
                                        ...prev, confirmPassword: e.target.value
                                    }))}
                                    required
                                />
                            </div>
                            <div className="modal-actions">
                                <button type="submit" className="btn primary" disabled={updating}>
                                    {updating ? (
                                        <>
                                            <i className="fas fa-spinner fa-spin"></i>
                                            ƒêang ƒë·ªïi...
                                        </>
                                    ) : (
                                        'ƒê·ªïi m·∫≠t kh·∫©u'
                                    )}
                                </button>
                                <button
                                    type="button"
                                    className="btn secondary"
                                    onClick={() => {
                                        setIsChangingPassword(false);
                                        setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
                                    }}
                                >
                                    H·ªßy
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* Booking Details Modal */}
            {showBookingModal && selectedBooking && (
                <div className="modal-overlay">
                    <div className="modal large booking-details-modal">
                        <div className="modal-header">
                            <div className="modal-title-section">
                                <h3>Chi ti·∫øt ƒë·∫∑t xe</h3>
                                <div className="booking-id-badge">
                                    #{selectedBooking.bookingId}
                                </div>
                            </div>
                            <button 
                                className="close-btn"
                                onClick={() => {
                                    setShowBookingModal(false);
                                    setSelectedBooking(null);
                                }}
                            >
                                √ó
                            </button>
                        </div>
                        
                        <div className="modal-content">
                            <div className="booking-detail-grid">
                                {/* ‚úÖ Ki·ªÉm tra xem c√≥ ƒëang load details kh√¥ng */}
                                {!selectedBooking.paymentDetails ? (
                                    <div className="loading-details">
                                        <div className="spinner"></div>
                                        <p>ƒêang t·∫£i chi ti·∫øt...</p>
                                    </div>
                                ) : (
                                    <>
                                {/* Th√¥ng tin xe */}
                                <div className="detail-section">
                                    <div className="section-header">
                                        <i className="fas fa-car"></i>
                                        <h4>Th√¥ng tin xe</h4>
                                    </div>
                                    <div className="detail-items">
                                        <div className="detail-item">
                                            <label>M·∫´u xe:</label>
                                                    <span>{selectedBooking.carModel || 'N/A'}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>Bi·ªÉn s·ªë:</label>
                                                    <span className="highlight">{selectedBooking.carLicensePlate || 'N/A'}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>T√†i x·∫ø:</label>
                                            <span>{selectedBooking.driverName || 'T·ª± l√°i'}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>S·ªë gh·∫ø:</label>
                                            <span>{selectedBooking.seatNumber || 'N/A'} ch·ªó</span>
                                        </div>
                                    </div>
                                </div>
                                
                                {/* Th√¥ng tin chuy·∫øn ƒëi */}
                                <div className="detail-section">
                                    <div className="section-header">
                                        <i className="fas fa-route"></i>
                                        <h4>Th√¥ng tin chuy·∫øn ƒëi</h4>
                                    </div>
                                    <div className="detail-items">
                                        <div className="detail-item">
                                            <label>Th·ªùi gian:</label>
                                            <span className="date-range">
                                                {selectedBooking.startDate && selectedBooking.endDate 
                                                    ? `${new Date(selectedBooking.startDate).toLocaleDateString('vi-VN')} - ${new Date(selectedBooking.endDate).toLocaleDateString('vi-VN')}`
                                                    : 'N/A'
                                                }
                                            </span>
                                        </div>
                                        <div className="detail-item">
                                            <label>ƒêi·ªÉm ƒë√≥n:</label>
                                            <span>{selectedBooking.pickupLocation}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>ƒêi·ªÉm tr·∫£:</label>
                                            <span>{selectedBooking.dropoffLocation}</span>
                                        </div>
                                        <div className="detail-item">
                                            <label>Khu v·ª±c:</label>
                                            <span>{selectedBooking.regionName}</span>
                                        </div>

                                                {/* ‚úÖ S·ª¨A: Th·ªùi gian confirm - S·ª≠ d·ª•ng selectedBooking */}
                                                {selectedBooking.deliveryConfirmTime && (
                                            <div className="detail-item">
                                                        <label>Th·ªùi gian giao xe:</label>
                                                        <span>{new Date(selectedBooking.deliveryConfirmTime).toLocaleString('vi-VN')}</span>
                                            </div>
                                        )}

                                                {selectedBooking.returnConfirmTime && (
                                        <div className="detail-item">
                                                        <label>Th·ªùi gian tr·∫£ xe:</label>
                                                        <span>{new Date(selectedBooking.returnConfirmTime).toLocaleString('vi-VN')}</span>
                                        </div>
                                                )}

                                                {/* ‚úÖ S·ª¨A: Khuy·∫øn m√£i - S·ª≠ d·ª•ng selectedBooking */}
                                        <div className="detail-item">
                                            <label>Khuy·∫øn m√£i:</label>
                                            {selectedBooking.promoCode ? (
                                                <span className="promo-info">
                                                    <span className="promo-code">{selectedBooking.promoCode}</span>
                                                    {selectedBooking.discountPercentage && (
                                                        <span className="discount">
                                                            (-{selectedBooking.discountPercentage}%)
                                                        </span>
                                                    )}
                                                </span>
                                            ) : (
                                                <span className="no-data">Kh√¥ng s·ª≠ d·ª•ng</span>
                                            )}
                                        </div>

                                                {/* ‚úÖ S·ª¨A: M√¥ t·∫£ khuy·∫øn m√£i - S·ª≠ d·ª•ng selectedBooking */}
                                        {selectedBooking.promoCode && (
                                            <div className="detail-item">
                                                <label>M√¥ t·∫£ khuy·∫øn m√£i:</label>
                                                <span className="promo-desc">
                                                    {selectedBooking.promoDescription || 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt'}
                                                </span>
                                            </div>
                                        )}

                                                {/* ‚úÖ S·ª¨A: Gia h·∫°n - S·ª≠ d·ª•ng selectedBooking */}
                                        <div className="detail-item">
                                            <label>Gia h·∫°n:</label>
                                            {selectedBooking.extensionDays > 0 ? (
                                                <span className="extension-info">
                                                    {selectedBooking.extensionDays} ng√†y
                                                    {selectedBooking.extensionStatusName && (
                                                        <span className={`extension-status ${selectedBooking.extensionStatusName.toLowerCase()}`}>
                                                            ({selectedBooking.extensionStatusName})
                                                        </span>
                                                    )}
                                                </span>
                                            ) : (
                                                <span className="no-data">Kh√¥ng c√≥ gia h·∫°n</span>
                                            )}
                                        </div>
                                    </div>
                                </div>

                                        {/* Th√¥ng tin thanh to√°n */}
                                        <div className="detail-section">
                                            <div className="section-header">
                                                <i className="fas fa-credit-card"></i>
                                                <h4>Th√¥ng tin thanh to√°n</h4>
                                            </div>
                                            <div className="detail-items">
                                                {/* ‚úÖ Debug payment details */}
                                                {console.log('üîç Checking payment details:', {
                                                    hasPaymentDetails: !!selectedBooking.paymentDetails,
                                                    paymentDetailsLength: selectedBooking.paymentDetails?.length || 0,
                                                    paymentDetails: selectedBooking.paymentDetails
                                                })}

                                                {selectedBooking.paymentDetails && selectedBooking.paymentDetails.length > 0 ? (
                                                    <>
                                                        <div className="payment-records">
                                                            <h5>L·ªãch s·ª≠ thanh to√°n:</h5>
                                                            {selectedBooking.paymentDetails
                                                                .filter(payment => payment.paymentType !== 'payout')
                                                                .map((payment, index) => (
                                                                    <div key={payment.paymentId || index} className="payment-record">
                                                                        <div className="payment-record-header">
                                                                            <span className="payment-type-label">
                                                                                {payment.paymentType === 'deposit' ? 'üí∞ Ti·ªÅn c·ªçc' :
                                                                                    payment.paymentType === 'full_payment' ? 'üí≥ Thanh to√°n ƒë·∫ßy ƒë·ªß' :
                                                                                        'üîÑ Ho√†n ti·ªÅn'}
                                                                            </span>
                                                                            <span className={`payment-status-badge ${payment.statusName?.toLowerCase()}`}>
                                                                                {payment.statusName === 'paid' ? 'ƒê√£ thanh to√°n' :
                                                                                    payment.statusName === 'pending' ? 'Ch·ªù x·ª≠ l√Ω' : 'Th·∫•t b·∫°i'}
                                                                            </span>
                                                                        </div>

                                                                        <div className="payment-record-details">
                                                                            <div className="payment-amount-display">
                                                                                {new Intl.NumberFormat('vi-VN', {
                                                                                    style: 'currency',
                                                                                    currency: 'VND'
                                                                                }).format(payment.amount)}
                                                                            </div>

                                                                            <div className="payment-meta">
                                                                                <div className="payment-method">
                                                                                    <i className="fas fa-credit-card"></i>
                                                                                    {payment.paymentMethod?.toUpperCase() || 'N/A'}
                                                                                </div>
                                                                                <div className="payment-date">
                                                                                    <i className="fas fa-calendar"></i>
                                                                                    {payment.paymentDate ?
                                                                                        new Date(payment.paymentDate).toLocaleString('vi-VN') : 'N/A'}
                                                                                </div>
                                                                            </div>

                                                                            {payment.transactionId && (
                                                                                <div className="transaction-id">
                                                                                    <span>M√£ GD:</span>
                                                                                    <code>{payment.transactionId}</code>
                                                                                </div>
                                                                            )}
                                                                        </div>
                                                                    </div>
                                                                ))}
                                                        </div>

                                                        {/* T·ªïng k·∫øt thanh to√°n */}
                                                        {selectedBooking.paymentDetails.filter(payment => payment.paymentType !== 'payout').length > 1 && (
                                                            <div className="payment-summary-section">
                                                                <div className="summary-item total-paid">
                                                                    <div className="summary-label">
                                                                        <i className="fas fa-calculator"></i>
                                                                        <strong>T·ªïng ƒë√£ thanh to√°n:</strong>
                                                                    </div>
                                                                    <div className="summary-amount total">
                                                                        <strong>
                                                                            {new Intl.NumberFormat('vi-VN', {
                                                                                style: 'currency',
                                                                                currency: 'VND'
                                                                            }).format(
                                                                                selectedBooking.paymentDetails
                                                                                    .filter(p => (p.paymentType === 'deposit' || p.paymentType === 'full_payment') && p.paymentType !== 'payout')
                                                                                    .reduce((sum, payment) => sum + payment.amount, 0)
                                                                            )}
                                                                        </strong>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        )}
                                                    </>
                                                ) : (
                                                    <div className="no-payment-info">
                                                        <i className="fas fa-info-circle"></i>
                                                        <span>Ch∆∞a c√≥ th√¥ng tin thanh to√°n</span>
                                                       
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                        
                        <div className="modal-actions">
                            <button 
                                className="btn secondary" 
                                onClick={() => {
                                    setShowBookingModal(false);
                                    setSelectedBooking(null);
                                }}
                            >
                                <i className="fas fa-times"></i>
                                ƒê√≥ng
                            </button>
                            {(selectedBooking?.statusName === 'confirmed' || selectedBooking?.statusName === 'pending') && (
                                <button 
                                    className="btn danger"
                                    onClick={() => {
                                        setShowBookingModal(false);
                                        handleCancelBooking(selectedBooking.bookingId);
                                    }}
                                >
                                    <i className="fas fa-ban"></i>
                                    H·ªßy ƒë·∫∑t xe
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {showPaymentModal && paymentModalData && (
                <PaymentModal
                    data={paymentModalData}
                    onClose={() => setShowPaymentModal(false)}
                    onPayment={() => {
                        setShowPaymentModal(false);
                        fetchBookings();
                    }}
                />
            )}

            {showReviewModal && reviewBooking && (
              <div className="modal-overlay">
                <div className="modal review-modal">
                  <div className="modal-header">
                    <h3>
                      {(reviewBooking.hasRated || reviewBooking.rating || (reviewBooking.ratings && reviewBooking.ratings.length > 0))
                        ? "ƒê√°nh gi√° l·∫°i"
                        : "ƒê√°nh gi√° xe"}
                    </h3>
                    <button className="close-btn" onClick={() => setShowReviewModal(false)}>√ó</button>
                  </div>
                  <div className="modal-content">
                    <div>
                      <b>Xe:</b> {reviewBooking.car?.model} - {reviewBooking.carLicensePlate}
                    </div>
                    <div>
                      <b>Chuy·∫øn ƒëi:</b> #{reviewBooking.bookingId}
                    </div>
                    <div style={{margin: "16px 0"}}>
                      <label>S·ªë sao:</label>
                      <StarRating
                        rating={reviewData.rating}
                        size="large"
                        interactive={true}
                        onRatingChange={r => setReviewData(prev => ({...prev, rating: r}))}
                      />
                    </div>
                    <div>
                      <label>B√¨nh lu·∫≠n:</label>
                      <textarea
                        value={reviewData.comment}
                        onChange={e => setReviewData(prev => ({...prev, comment: e.target.value}))}
                        rows={4}
                        style={{width: "100%"}}
                        placeholder="Nh·∫≠p nh·∫≠n x√©t c·ªßa b·∫°n"
                      />
                    </div>
                    <div>
                      <label>
                        <input
                          type="checkbox"
                          checked={reviewData.isAnonymous}
                          onChange={e => setReviewData(prev => ({...prev, isAnonymous: e.target.checked}))}
                        />
                        ·∫®n danh
                      </label>
                    </div>
                  </div>
                  <div className="modal-actions">
                    <button className="btn primary" onClick={handleSubmitReview}>G·ª≠i ƒë√°nh gi√°</button>
                    <button className="btn secondary" onClick={() => setShowReviewModal(false)}>H·ªßy</button>
                  </div>
                </div>
              </div>
            )}
        </div>
    );
};

// PaymentModal component
const PaymentModal = ({ data, onClose, onPayment }) => {
    const [paymentMethod, setPaymentMethod] = useState('');
    const [isProcessing, setIsProcessing] = useState(false);
    const handleConfirm = async () => {
        setIsProcessing(true);
        try {
            const paymentData = {
                bookingId: data.bookingId,
                amount: data.amountToPay,
                currency: 'VND',
                paymentMethod,
                withDriver: data.withDriver,
                deliveryRequested: data.deliveryRequested,
                paymentType: 'full_payment', // B·∫ÆT BU·ªòC
            };
            const endpoint = '/api/payments';
            const response = await post(endpoint, paymentData);
            if (response.redirectUrl) {
                window.location.href = response.redirectUrl;
            } else if (response.success) {
                onPayment();
            } else {
                alert(response.error || 'Thanh to√°n th·∫•t b·∫°i!');
            }
        } catch (err) {
            alert('C√≥ l·ªói khi thanh to√°n: ' + (err.message || err));
        } finally {
            setIsProcessing(false);
        }
    };
    return (
        <div className="modal-overlay">
            <div className="modal payment-modal">
                <div className="modal-header">
                    <h3>Thanh to√°n khi nh·∫≠n xe</h3>
                    <button className="close-btn" onClick={onClose}>√ó</button>
                </div>
                <div className="modal-content">
                    <div className="summary">
                        <div><b>Xe:</b> {data.carModel} - {data.carLicensePlate}</div>
                        <div><b>ƒêi·ªÉm ƒë√≥n:</b> {data.pickupLocation}</div>
                        <div><b>ƒêi·ªÉm tr·∫£:</b> {data.dropoffLocation}</div>
                        <div><b>T·ªïng ti·ªÅn thu√™:</b> {data.total.toLocaleString()} VND</div>
                        <div><b>ƒê√£ ƒë·∫∑t c·ªçc:</b> {data.deposit.toLocaleString()} VND</div>
                        <div><b>Th·∫ø ch·∫•p:</b> 5.000.000 VND</div>
                        <div className="amount-to-pay">
                            <b>C·∫ßn thanh to√°n:</b> <span style={{color: '#1976d2', fontSize: 22}}>{data.amountToPay.toLocaleString()} VND</span>
                        </div>
                    </div>
                    <div className="payment-methods">
                        <label><input type="radio" value="vnpay" checked={paymentMethod === 'vnpay'} onChange={() => setPaymentMethod('vnpay')} /> VNPay</label>
                        <label><input type="radio" value="momo" checked={paymentMethod === 'momo'} onChange={() => setPaymentMethod('momo')} /> MoMo</label>
                        <label><input type="radio" value="cash" checked={paymentMethod === 'cash'} onChange={() => setPaymentMethod('cash')} /> Ti·ªÅn m·∫∑t</label>
                    </div>
                </div>
                <div className="modal-actions">
                    <button className="btn primary" onClick={handleConfirm} disabled={!paymentMethod || isProcessing}>
                        {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n thanh to√°n'}
                    </button>
                    <button className="btn secondary" onClick={onClose}>H·ªßy</button>
                </div>
            </div>
            <style>{`
                .modal-overlay {
                  position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                  background: rgba(0,0,0,0.3); z-index: 1000; display: flex; align-items: center; justify-content: center;
                }
                .modal.payment-modal {
                  background: #fff; border-radius: 16px; max-width: 400px; width: 100%; padding: 24px; box-shadow: 0 8px 32px rgba(0,0,0,0.15);
                }
                .modal-header { display: flex; justify-content: space-between; align-items: center; }
                .close-btn { background: none; border: none; font-size: 24px; cursor: pointer; }
                .summary { margin-bottom: 16px; }
                .amount-to-pay { margin-top: 12px; }
                .payment-methods label { display: block; margin: 8px 0; }
                .modal-actions { display: flex; gap: 12px; margin-top: 16px; }
                .btn.primary { background: #1976d2; color: #fff; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; }
                .btn.secondary { background: #eee; color: #333; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; }
            `}</style>
        </div>
    );
};

export default ProfilePage;
