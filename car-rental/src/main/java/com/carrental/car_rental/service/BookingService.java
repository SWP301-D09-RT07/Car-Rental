package com.carrental.car_rental.service;

import com.carrental.car_rental.dto.*;
import com.carrental.car_rental.entity.*;
import com.carrental.car_rental.mapper.BookingMapper;
import com.carrental.car_rental.mapper.UserMapper;
import com.carrental.car_rental.repository.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import com.carrental.car_rental.mapper.RatingMapper;
import com.carrental.car_rental.service.EmailService;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import jakarta.persistence.EntityNotFoundException;
import java.util.Objects;

@Service
public class BookingService {
    private static final Logger logger = LoggerFactory.getLogger(BookingService.class);

    private final BookingRepository bookingRepository;
    private final CarRepository carRepository;
    private final InsuranceRepository insuranceRepository;
    private final MaintenanceRepository maintenanceRepository;
    private final UserRepository userRepository;
    private final DriverRepository driverRepository;
    private final RegionRepository regionRepository;
    private final StatusRepository statusRepository;
    private final BookingFinancialsService financialsService;
    private final PromotionRepository promotionRepository;
    private final PaymentRepository paymentRepository;
    private final RatingRepository ratingRepository;
    private final CarConditionReportRepository carConditionReportRepository;
    private final EmailService emailService;

    private final UserMapper userMapper;
    private final RatingMapper ratingMapper;
    private final BookingMapper bookingMapper;

    private static final int AVAILABLE_STATUS_ID = 11;
    private static final int PENDING_STATUS_ID = 1;
    private static final int CANCELLED_STATUS_ID = 5;
    private static final int COMPLETED_STATUS_ID = 4;
 
    public BookingService(
            BookingRepository bookingRepository,
            CarRepository carRepository,
            InsuranceRepository insuranceRepository,
            MaintenanceRepository maintenanceRepository,
            UserRepository userRepository,
            DriverRepository driverRepository,
            RegionRepository regionRepository,
            StatusRepository statusRepository,
            BookingMapper bookingMapper,
            BookingFinancialsService financialsService,
            PromotionRepository promotionRepository,
            PaymentRepository paymentRepository,
            RatingRepository ratingRepository, 
            UserMapper userMapper, 
            RatingMapper ratingMapper,
            CarConditionReportRepository carConditionReportRepository,
            EmailService emailService) {
        this.bookingRepository = bookingRepository;
        this.carRepository = carRepository;
        this.insuranceRepository = insuranceRepository;
        this.maintenanceRepository = maintenanceRepository;
        this.userRepository = userRepository;
        this.driverRepository = driverRepository;
        this.regionRepository = regionRepository;
        this.statusRepository = statusRepository;
        this.bookingMapper = bookingMapper;
        this.financialsService = financialsService;
        this.promotionRepository = promotionRepository;
        this.paymentRepository = paymentRepository;
        this.ratingRepository = ratingRepository;
        this.userMapper = userMapper;
        this.ratingMapper = ratingMapper;
        this.carConditionReportRepository = carConditionReportRepository;
        this.emailService = emailService;
    }

    @Transactional(readOnly = true)
    public BookingDTO findById(Integer id) {
        logger.info("üîç Fetching booking with id: {}", id);
        Optional<Booking> bookingOpt = bookingRepository.findByIdWithAllRelations(id);
        if (bookingOpt.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + id);
        }
        Booking booking = bookingOpt.get();
        BookingDTO dto = bookingMapper.toDTO(booking);
        // Enrich regionName
        dto.setRegionName(
            booking.getRegion() != null ? booking.getRegion().getRegionName() :
            (booking.getCar() != null && booking.getCar().getRegion() != null ? booking.getCar().getRegion().getRegionName() : null)
        );
        // Enrich price breakdown & totalAmount
        try {
            PriceBreakdownDTO breakdown = financialsService.calculatePriceBreakdown(dto);
            dto.setPriceBreakdown(breakdown);
            if (breakdown != null && breakdown.getTotal() != null) {
                dto.setTotalAmount(breakdown.getTotal());
            }
        } catch (Exception e) {
            dto.setTotalAmount(java.math.BigDecimal.ZERO);
        }
        // Enrich payment info
        loadPaymentInfo(dto, dto.getBookingId());
        enrichWithCarReportInfo(dto, dto.getBookingId());
        return dto;
    }

    @Transactional(readOnly = true)
    public BookingDTO findByTransactionId(String transactionId) {
        logger.info("üîç Fetching booking by transactionId: {}", transactionId);
        Optional<Booking> bookingOpt = bookingRepository.findByTransactionIdWithAllRelations(transactionId);
        if (bookingOpt.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi transactionId: " + transactionId);
        }
        Booking booking = bookingOpt.get();
        BookingDTO dto = bookingMapper.toDTO(booking);
        // Enrich regionName
        dto.setRegionName(
            booking.getRegion() != null ? booking.getRegion().getRegionName() :
            (booking.getCar() != null && booking.getCar().getRegion() != null ? booking.getCar().getRegion().getRegionName() : null)
        );
        // Enrich price breakdown & totalAmount
        try {
            PriceBreakdownDTO breakdown = financialsService.calculatePriceBreakdown(dto);
            dto.setPriceBreakdown(breakdown);
            if (breakdown != null && breakdown.getTotal() != null) {
                dto.setTotalAmount(breakdown.getTotal());
            }
        } catch (Exception e) {
            dto.setTotalAmount(java.math.BigDecimal.ZERO);
        }
        // Enrich payment info
        loadPaymentInfo(dto, dto.getBookingId());
        enrichWithCarReportInfo(dto, dto.getBookingId());
        return dto;
    }

    public List<BookingDTO> findAll() {
        logger.info("Fetching all bookings");
        return bookingRepository.findAllByIsDeletedFalse()
                .stream()
                .map(bookingMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<BookingDTO> findByUserId(Integer userId) {
        logger.info("Fetching bookings for userId: {}", userId);
        try {
            // S·ª≠ d·ª•ng query v·ªõi eager loading
            List<BookingDTO> bookingDTOs = bookingRepository.findByCustomerIdWithDetails(userId)
                    .stream()
                    .map(bookingMapper::toDTO)
                    .collect(Collectors.toList());
            // Bulk check hasRated ƒë·ªÉ t·ªëi ∆∞u performance
            if (!bookingDTOs.isEmpty()) {
                List<Integer> bookingIds = bookingDTOs.stream()
                    .map(BookingDTO::getBookingId)
                    .collect(Collectors.toList());
                List<Integer> ratedBookingIds = ratingRepository.findRatedBookingIds(bookingIds);
                Set<Integer> ratedSet = new HashSet<>(ratedBookingIds);
                // Set hasRated flag
                bookingDTOs.forEach(dto -> 
                    dto.setHasRated(ratedSet.contains(dto.getBookingId()))
                );
                logger.info("Set hasRated for {} bookings, {} have ratings", 
                    bookingDTOs.size(), ratedSet.size());
            }
            // Set t·ªïng ti·ªÅn cho t·ª´ng booking
            bookingDTOs.forEach(dto -> {
                try {
                    BookingFinancialsDTO financials = financialsService.getOrCreateFinancials(dto);
                    if (financials != null && financials.getTotalFare() != null) {
                        dto.setTotalAmount(financials.getTotalFare());
                    }
                } catch (Exception e) {
                    dto.setTotalAmount(java.math.BigDecimal.ZERO);
                }
                // ‚úÖ ƒê·∫£m b·∫£o set payment info cho t·ª´ng booking
                loadPaymentInfo(dto, dto.getBookingId());
                // ‚úÖ Lu√¥n enrich v·ªõi payment info
                enrichWithPaymentInfo(dto, dto.getBookingId());
                // ‚úÖ Enrich v·ªõi car condition report info
                enrichWithCarReportInfo(dto, dto.getBookingId());
            });
            return bookingDTOs;
        } catch (Exception e) {
            logger.error("Error fetching bookings for userId: {}", userId, e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, 
                "Error fetching user bookings: " + e.getMessage());
        }
    }

    public List<BookingDTO> findByCarId(Integer carId) {
        logger.info("Fetching bookings for carId: {}", carId);
        List<BookingDTO> bookingDTOs = bookingRepository.findByCarIdAndIsDeleted(carId, false)
                .stream()
                .map(bookingMapper::toDTO)
                .collect(Collectors.toList());
        
        // ‚úÖ Enrich v·ªõi car condition report info
        bookingDTOs.forEach(dto -> enrichWithCarReportInfo(dto, dto.getBookingId()));
        
        return bookingDTOs;
    }

    @Transactional
    public BookingDTO save(BookingDTO dto) {
        logger.info("Saving new booking with DTO: carId={}, pickupLocation={}, dropoffLocation={}, pickupDateTime={}, dropoffDateTime={}",
            dto.getCarId(), dto.getPickupLocation(), dto.getDropoffLocation(), dto.getPickupDateTime(), dto.getDropoffDateTime());

        // Validate required fields
        if (dto.getCarId() == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Car ID is required");
        }
        if (dto.getUserId() == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User ID is required");
        }
        if (dto.getPickupDateTime() == null || dto.getDropoffDateTime() == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Pickup and dropoff dates are required");
        }
        if (dto.getPickupDateTime().isAfter(dto.getDropoffDateTime())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Pickup date cannot be after dropoff date");
        }

        // Validate car exists and is available
        Car car = carRepository.findById(dto.getCarId())
                .filter(c -> !c.getIsDeleted())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Car not found or has been deleted"));

        // Validate user exists
        User user = userRepository.findById(dto.getUserId())
                .filter(u -> !u.getIsDeleted())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found or has been deleted"));

        // Check if car is available for the specified dates
        Instant startInstant = dto.getPickupDateTime().atZone(java.time.ZoneId.systemDefault()).toInstant();
        Instant endInstant = dto.getDropoffDateTime().atZone(java.time.ZoneId.systemDefault()).toInstant();
        List<Booking> conflictingBookings = bookingRepository.findByCarIdAndOverlappingDates(
            dto.getCarId(), startInstant, endInstant);
        
        if (!conflictingBookings.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, 
                "Car is not available for the specified dates. Please choose different dates.");
        }

        // Create booking entity
        Booking booking = new Booking();
        booking.setCar(car);
        booking.setCustomer(user);
        booking.setPickupLocation(dto.getPickupLocation());
        booking.setDropoffLocation(dto.getDropoffLocation());
        // S·ª¨A: Chuy·ªÉn LocalDateTime -> Instant khi set v√†o entity
        booking.setStartDate(dto.getPickupDateTime() != null ? dto.getPickupDateTime().atZone(java.time.ZoneId.systemDefault()).toInstant() : null);
        booking.setEndDate(dto.getDropoffDateTime() != null ? dto.getDropoffDateTime().atZone(java.time.ZoneId.systemDefault()).toInstant() : null);
        booking.setBookingDate(Instant.now());
        booking.setStatus(statusRepository.findById(PENDING_STATUS_ID)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Default status not found")));
        booking.setRegion(car.getRegion());
        booking.setWithDriver(dto.getWithDriver() != null ? dto.getWithDriver() : false);
        
        // T√≠nh to√°n deposit amount n·∫øu kh√¥ng c√≥ trong DTO
        BigDecimal depositAmount = dto.getDepositAmount();
        if (depositAmount == null) {
            // T√≠nh to√°n deposit amount d·ª±a tr√™n daily rate v√† s·ªë ng√†y thu√™
            long days = java.time.temporal.ChronoUnit.DAYS.between(
                dto.getPickupDateTime().toLocalDate(), 
                dto.getDropoffDateTime().toLocalDate()
            );
            if (days == 0) days = 1; // T·ªëi thi·ªÉu 1 ng√†y
            
            BigDecimal dailyRate = car.getDailyRate();
            BigDecimal totalAmount = dailyRate.multiply(BigDecimal.valueOf(days));
            depositAmount = totalAmount.multiply(BigDecimal.valueOf(0.3)); // 30% deposit
            
            logger.info("Calculated deposit amount: {} for {} days at daily rate: {}", 
                depositAmount, days, dailyRate);
        }
        booking.setDepositAmount(depositAmount);
        
        // Set seat number from car
        booking.setSeatNumber(car.getNumOfSeats());
        booking.setIsDeleted(false);
        booking.setCreatedAt(Instant.now());
        booking.setUpdatedAt(Instant.now());
        booking.setIsDeleted(false);
        booking.setDepositAmount(dto.getDepositAmount() != null ? dto.getDepositAmount() : BigDecimal.ZERO);
        booking.setSeatNumber(dto.getSeatNumber() != null ? dto.getSeatNumber() : (short) 0);

        // S·ª¨A 1: H·ªó tr·ª£ xe t·ª± l√°i v√† c√≥ t√†i x·∫ø
        if (dto.getDriverId() != null && dto.getDriverId() > 0) {
            // C√≥ t√†i x·∫ø ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            Driver driver = driverRepository.findById(dto.getDriverId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Driver not found with ID: " + dto.getDriverId()));
            booking.setDriver(driver);
            logger.info("Booking assigned to driver: {}", dto.getDriverId());
        } else {
            // Xe t·ª± l√°i - kh√¥ng c√≥ t√†i x·∫ø
            booking.setDriver(null);
            logger.info("Booking set as self-drive (no driver)");
        }

        // S·ª¨A 2: S·ª≠ d·ª•ng region t·ª´ input thay v√¨ hardcode
        if (dto.getRegionId() != null && dto.getRegionId() > 0) {
            Region region = regionRepository.findById(dto.getRegionId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Region not found with ID: " + dto.getRegionId()));
            booking.setRegion(region);
            logger.info("Booking assigned to region: {}", dto.getRegionId());
        } else {
            // Fallback to default region n·∫øu kh√¥ng c√≥ region ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            booking.setRegion(regionRepository.findById(1)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Default region not found")));
            logger.warn("No region specified, using default region ID: 1");
        }

        if (dto.getPromoId() != null) {
            Promotion promo = promotionRepository.findById(dto.getPromoId())
                    .filter(p -> !p.getIsDeleted() && p.getEndDate().isAfter(ChronoLocalDate.from(LocalDateTime.now())))
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid or expired promotion"));
            booking.setPromo(promo);
        }

        // Set promotion if specified
        if (dto.getPromoId() != null) {
            Promotion promotion = promotionRepository.findById(dto.getPromoId())
                    .filter(p -> !p.getIsDeleted() && p.getEndDate().isAfter(LocalDate.now()))
                    .orElse(null);
            if (promotion != null) {
                booking.setPromo(promotion);
            }
        }

        // Save booking
        logger.info("B·∫Øt ƒë·∫ßu l∆∞u booking...");
        Booking savedBooking = bookingRepository.save(booking);
        logger.info("ƒê√£ save booking v√†o DB, id={}", savedBooking.getId());

        // T·∫°o BookingFinancials trong transaction ri√™ng bi·ªát ƒë·ªÉ tr√°nh deadlock
        // S·ª≠ d·ª•ng @Async ho·∫∑c g·ªçi sau khi transaction hi·ªán t·∫°i commit
        try {
            // G·ªçi async ƒë·ªÉ tr√°nh deadlock
            createBookingFinancialsAsync(savedBooking.getId());
            logger.info("Successfully initiated BookingFinancials creation for booking ID: {}", savedBooking.getId());
        } catch (Exception e) {
            logger.error("Error creating BookingFinancials for booking ID: {}", savedBooking.getId(), e);
            // Kh√¥ng throw exception v√¨ booking ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
            // BookingFinancials c√≥ th·ªÉ ƒë∆∞·ª£c t·∫°o sau n√†y khi c·∫ßn thi·∫øt
        }

        return bookingMapper.toDTO(savedBooking);
    }

    // Ph∆∞∆°ng th·ª©c async ƒë·ªÉ t·∫°o BookingFinancials
    @Async
    public void createBookingFinancialsAsync(Integer bookingId) {
        try {
            logger.info("Async: B·∫Øt ƒë·∫ßu t·∫°o BookingFinancials cho booking ID: {}", bookingId);
            BookingDTO booking = findById(bookingId);
            financialsService.createOrUpdateFinancials(booking);
            logger.info("Async: ƒê√£ t·∫°o BookingFinancials th√†nh c√¥ng cho booking ID: {}", bookingId);
        } catch (Exception e) {
            logger.error("Async: L·ªói khi t·∫°o BookingFinancials cho booking ID: {}", bookingId, e);
        }
    }

    public BookingConfirmationDTO confirmBooking(BookingConfirmationDTO dto) {
        logger.info("Confirming booking for car ID: {}, pickupDateTime={}, dropoffDateTime={}",
            dto.getCarId(), dto.getPickupDateTime(), dto.getDropoffDateTime());

        if (!dto.getAgreeTerms()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "You must agree to the terms");
        }

        BookingDTO bookingDTO = new BookingDTO();
        bookingDTO.setCarId(dto.getCarId());
        bookingDTO.setUserId(dto.getUserId());
        bookingDTO.setPickupDateTime(dto.getPickupDateTime());
        bookingDTO.setDropoffDateTime(dto.getDropoffDateTime());
        bookingDTO.setPickupLocation(dto.getPickupLocation());
        bookingDTO.setDropoffLocation(dto.getDropoffLocation());
        bookingDTO.setStatusId(PENDING_STATUS_ID);
        bookingDTO.setWithDriver(dto.getWithDriver());
        bookingDTO.setDeliveryRequested(dto.getDeliveryRequested());

        if (dto.getPromoCode() != null) {
            Promotion promo = promotionRepository.findByCode(dto.getPromoCode())
                    .filter(p -> !p.getIsDeleted() && p.getEndDate().isAfter(ChronoLocalDate.from(LocalDateTime.now())))
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid or expired promo code"));
            bookingDTO.setPromoId(promo.getId());
        }

        BookingDTO savedBooking = save(bookingDTO);

        PriceBreakdownDTO priceBreakdown = financialsService.calculatePriceBreakdown(savedBooking);
        dto.setBookingId(savedBooking.getBookingId());
        dto.setPriceBreakdown(priceBreakdown);

        return dto;
    }

    public BookingDTO update(Integer id, BookingDTO dto) {
        logger.info("Updating booking with id: {}", id);
        Booking booking = bookingRepository.findById(id)
                .filter(b -> !b.getIsDeleted())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Booking not found or has been deleted."));

        LocalDateTime startDate = dto.getPickupDateTime();
        LocalDateTime endDate = dto.getDropoffDateTime();
        if (startDate != null && endDate != null && startDate.isAfter(endDate)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid date range");
        }

        if (dto.getCarId() != null) {
            Car car = carRepository.findById(dto.getCarId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Car not found"));
            if (car.getStatus().getId() != AVAILABLE_STATUS_ID) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Car is not available");
            }
            booking.setCar(car);
        }

        if (dto.getPickupLocation() != null) booking.setPickupLocation(dto.getPickupLocation());
        if (dto.getDropoffLocation() != null) booking.setDropoffLocation(dto.getDropoffLocation());
        // S·ª¨A: Chuy·ªÉn LocalDateTime -> Instant khi set v√†o entity
        if (startDate != null) booking.setStartDate(startDate.atZone(java.time.ZoneId.systemDefault()).toInstant());
        if (endDate != null) booking.setEndDate(endDate.atZone(java.time.ZoneId.systemDefault()).toInstant());

        booking.setUpdatedAt(Instant.now());
        Booking updatedBooking = bookingRepository.save(booking);
        return bookingMapper.toDTO(updatedBooking);
    }

    public void delete(Integer id) {
        logger.info("Deleting booking with id: {}", id);
        Booking booking = bookingRepository.findById(id)
                .filter(b -> !b.getIsDeleted())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Booking not found or has been deleted."));
        booking.setIsDeleted(true);
        booking.setUpdatedAt(Instant.now());
        bookingRepository.save(booking);
    }

    public List<BookingDTO> getBookingsByCustomerId(Integer customerId) {
        logger.info("Fetching bookings for customerId: {}", customerId);
        
        try {
            List<BookingDTO> bookingDTOs = bookingRepository.findByCustomerIdAndIsDeleted(customerId, false)
                    .stream()
                    .map(bookingMapper::toDTO)
                    .collect(Collectors.toList());
            
            // Bulk check hasRated ƒë·ªÉ t·ªëi ∆∞u performance
            if (!bookingDTOs.isEmpty()) {
                List<Integer> bookingIds = bookingDTOs.stream()
                    .map(BookingDTO::getBookingId)
                    .collect(Collectors.toList());
                
                List<Integer> ratedBookingIds = ratingRepository.findRatedBookingIds(bookingIds);
                Set<Integer> ratedSet = new HashSet<>(ratedBookingIds);
                
                // Set hasRated flag
                bookingDTOs.forEach(dto -> {
                    dto.setHasRated(ratedSet.contains(dto.getBookingId()));
                    // ‚úÖ Enrich v·ªõi car condition report info
                    enrichWithCarReportInfo(dto, dto.getBookingId());
                });
            }
            
            return bookingDTOs;
            
        } catch (Exception e) {
            logger.error("Error fetching bookings for customerId: {}", customerId, e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, 
                "Error fetching customer bookings: " + e.getMessage());
        }
    }

@Transactional(readOnly = true)
public BookingDTO findByIdWithDetails(Integer bookingId) {
    logger.info("üîç Fetching booking with id: {} (with details)", bookingId);
    Optional<Booking> bookingOpt = bookingRepository.findByIdWithAllRelations(bookingId);
    if (bookingOpt.isEmpty()) {
        throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId);
    }
    Booking booking = bookingOpt.get();
    BookingDTO dto = bookingMapper.toDTO(booking);
    dto.setRegionName(
        booking.getRegion() != null ? booking.getRegion().getRegionName() :
        (booking.getCar() != null && booking.getCar().getRegion() != null ? booking.getCar().getRegion().getRegionName() : null)
    );
    try {
        PriceBreakdownDTO breakdown = financialsService.calculatePriceBreakdown(dto);
        dto.setPriceBreakdown(breakdown);
        if (breakdown != null && breakdown.getTotal() != null) {
            dto.setTotalAmount(breakdown.getTotal());
        }
    } catch (Exception e) {
        dto.setTotalAmount(java.math.BigDecimal.ZERO);
    }
    loadPaymentInfo(dto, dto.getBookingId());
    enrichWithCarReportInfo(dto, dto.getBookingId());
    return dto;
}

    @Transactional
    public BookingDTO cancelBooking(Integer bookingId) {
        logger.info("Cancelling booking with id: {}", bookingId);
        try {
            // T√¨m booking
            Booking booking = bookingRepository.findById(bookingId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId));
            
            // Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy
            String currentStatus = booking.getStatus().getStatusName();
            if (!"confirmed".equals(currentStatus) && !"pending".equals(currentStatus)) {
                throw new RuntimeException("Kh√¥ng th·ªÉ h·ªßy booking v·ªõi tr·∫°ng th√°i: " + currentStatus);
            }
            
            // T√¨m cancelled status - D√ôNG ID thay v√¨ t·∫°o m·ªõi
            Status cancelledStatus = statusRepository.findById(CANCELLED_STATUS_ID)
                    .orElseThrow(() -> new RuntimeException("L·ªói h·ªá th·ªëng: Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i cancelled"));
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† isDeleted
            booking.setStatus(cancelledStatus);
            booking.setIsDeleted(true); // <-- Th√™m d√≤ng n√†y
            booking.setUpdatedAt(Instant.now());
            
            // L∆∞u booking
            Booking savedBooking = bookingRepository.save(booking);
            
            // G·ª≠i email th√¥ng b√°o h·ªßy booking cho kh√°ch h√†ng
            try {
                String email = booking.getCustomer().getEmail();
                String subject = "ƒê∆°n ƒë·∫∑t xe #" + booking.getId() + " ƒë√£ b·ªã h·ªßy";
                String content = "Ch√†o " + booking.getCustomer().getUsername() + ",\n\n"
                    + "ƒê∆°n ƒë·∫∑t xe #" + booking.getId() + " c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.\n"
                    + "N·∫øu b·∫°n ƒë√£ thanh to√°n, ti·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i trong v√≤ng 3-5 ng√†y l√†m vi·ªác.\n"
                    + "N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá RentCar.";
                emailService.sendEmail(email, subject, content);
                logger.info("Sent cancel email to {}", email);
            } catch (Exception e) {
                logger.warn("Kh√¥ng g·ª≠i ƒë∆∞·ª£c email th√¥ng b√°o h·ªßy booking: {}", booking.getId());
            }
            
            logger.info("Successfully cancelled booking: {}", bookingId);
            return bookingMapper.toDTO(savedBooking);
            
        } catch (Exception e) {
            logger.error("Error cancelling booking: {}", bookingId, e);
            throw new RuntimeException("Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t xe: " + e.getMessage());
        }
    }

    @Transactional
    public void ensureBookingFinancials(Integer bookingId) {
        logger.info("Ensuring financials for booking ID: {}", bookingId);
        try {
            BookingDTO booking = findById(bookingId);
            financialsService.createOrUpdateFinancials(booking);
            logger.info("Successfully ensured financials for booking ID: {}", bookingId);
        } catch (Exception e) {
            logger.error("Error ensuring financials for booking ID: {}", bookingId, e);
            throw new RuntimeException("Failed to ensure booking financials", e);
        }
    }

    /**
     * L·∫•y userId t·ª´ username
     */
    public Integer getUserIdByUsername(String username) {
        logger.info("Getting userId for username: {}", username);
        User user = userRepository.findByUsernameOrEmail(username, username)
                .filter(u -> !u.getIsDeleted())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, 
                    "User not found with username: " + username));
        logger.info("Found userId: {} for username: {}", user.getId(), username);
        return user.getId();
    }
   
    private void setHasRatedFlags(List<BookingDTO> bookingDTOs) {
    if (bookingDTOs.isEmpty()) {
        return;
    }
    
    try {
        List<Integer> bookingIds = bookingDTOs.stream()
            .map(BookingDTO::getBookingId)
            .collect(Collectors.toList());
        
        List<Integer> ratedBookingIds = ratingRepository.findRatedBookingIds(bookingIds);
        Set<Integer> ratedSet = new HashSet<>(ratedBookingIds);
        
        // Set hasRated flag
        bookingDTOs.forEach(dto -> 
            dto.setHasRated(ratedSet.contains(dto.getBookingId()))
        );
        
        logger.debug("Set hasRated for {} bookings, {} have ratings", 
            bookingDTOs.size(), ratedSet.size());
            
    } catch (Exception e) {
        logger.error("Error setting hasRated flags", e);
        // Set default false if error
        bookingDTOs.forEach(dto -> dto.setHasRated(false));
    }
    }
    @Transactional
public BookingDTO confirmDelivery(Integer bookingId, Boolean isSupplier) {
    Booking booking = bookingRepository.findById(bookingId)
        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Booking not found"));
    
    if (isSupplier) {
        booking.setSupplierDeliveryConfirm(true);
    } else {
        booking.setCustomerReceiveConfirm(true);
    }
    
    // N·∫øu c·∫£ hai b√™n ƒë·ªÅu confirm th√¨ set th·ªùi gian
    if (booking.getSupplierDeliveryConfirm() && booking.getCustomerReceiveConfirm()) {
        booking.setDeliveryConfirmTime(Instant.now());
    }
    
    return bookingMapper.toDTO(bookingRepository.save(booking));
}

@Transactional
public BookingDTO confirmReturn(Integer bookingId, Boolean isSupplier) {
    Booking booking = bookingRepository.findById(bookingId)
        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Booking not found"));
    
    if (isSupplier) {
        booking.setSupplierReturnConfirm(true);
    } else {
        
        booking.setCustomerReturnConfirm(true);
    }
    
    // N·∫øu c·∫£ hai b√™n ƒë·ªÅu confirm th√¨ set th·ªùi gian
    if (booking.getCustomerReturnConfirm() && booking.getSupplierReturnConfirm()) {
        booking.setReturnConfirmTime(Instant.now());
    }
    
    return bookingMapper.toDTO(bookingRepository.save(booking));
}
   
 public List<BookingDTO> getUserBookingHistory(Integer userId) {
    logger.info("üîç Fetching booking history for user: {}", userId);
    List<Booking> bookings = bookingRepository.findByCustomerIdWithAllRelations(userId);
    List<BookingDTO> result = bookings.stream().map(booking -> {
        BookingDTO dto = bookingMapper.toDTO(booking);
        dto.setRegionName(
            booking.getRegion() != null ? booking.getRegion().getRegionName() :
            (booking.getCar() != null && booking.getCar().getRegion() != null ? booking.getCar().getRegion().getRegionName() : null)
        );
        try {
            PriceBreakdownDTO breakdown = financialsService.calculatePriceBreakdown(dto);
            dto.setPriceBreakdown(breakdown);
            if (breakdown != null && breakdown.getTotal() != null) {
                dto.setTotalAmount(breakdown.getTotal());
            }
        } catch (Exception e) {
            dto.setTotalAmount(java.math.BigDecimal.ZERO);
        }
        loadPaymentInfo(dto, dto.getBookingId());
        enrichWithCarReportInfo(dto, dto.getBookingId());
        return dto;
    }).collect(Collectors.toList());
    setHasRatedFlags(result);
    logger.info("‚úÖ Returning {} booking DTOs with payment info", result.size());
    return result;
}

// ‚úÖ Helper method ƒë·ªÉ load payment info (DRY principle)
// ‚úÖ S·ª¨A: Convert Instant to LocalDateTime ƒë√∫ng c√°ch
private void loadPaymentInfo(BookingDTO dto, Integer bookingId) {
    try {
        List<Payment> payments = paymentRepository.findByBookingIdAndIsDeleted(bookingId, false);
        if (!payments.isEmpty()) {
            // ∆Øu ti√™n l·∫•y payment m·ªõi nh·∫•t theo paymentDate, lo·∫°i deposit tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ th√¨ full_payment
            Payment latestDeposit = payments.stream()
                .filter(p -> "deposit".equals(p.getPaymentType()))
                .max(Comparator.comparing(Payment::getPaymentDate))
                .orElse(null);
            Payment latestFull = payments.stream()
                .filter(p -> "full_payment".equals(p.getPaymentType()))
                .max(Comparator.comparing(Payment::getPaymentDate))
                .orElse(null);
            Payment latest = latestDeposit != null ? latestDeposit : latestFull;
            if (latest == null) {
                // fallback: l·∫•y payment m·ªõi nh·∫•t b·∫•t k·ª≥
                latest = payments.stream()
                    .max(Comparator.comparing(Payment::getPaymentDate))
                    .orElse(payments.get(0));
            }
            String status = latest.getPaymentStatus().getStatusName();
            dto.setPaymentStatus(status);
            dto.setPaymentType(latest.getPaymentType());
            dto.setPaymentAmount("paid".equals(status) ? latest.getAmount() : BigDecimal.ZERO);
            if (latest.getPaymentDate() != null) {
                dto.setPaymentDate(LocalDateTime.ofInstant(latest.getPaymentDate(), ZoneId.systemDefault()));
            } else {
                dto.setPaymentDate(null);
            }
            dto.setHasFullPayment(
                payments.stream().anyMatch(p -> "full_payment".equals(p.getPaymentType()) && "paid".equals(p.getPaymentStatus().getStatusName()))
            );
            dto.setHasDeposit(
                payments.stream().anyMatch(p -> "deposit".equals(p.getPaymentType()) && "paid".equals(p.getPaymentStatus().getStatusName()))
            );
        } else {
            dto.setPaymentStatus("pending");
            dto.setPaymentType(null);
            dto.setPaymentAmount(null);
            dto.setPaymentDate(null);
            dto.setHasFullPayment(false);
            dto.setHasDeposit(false);
        }
    } catch (Exception e) {
        logger.error("üí• Error loading payment for booking {}: {}", bookingId, e.getMessage());
        dto.setPaymentStatus("error");
        dto.setPaymentType(null);
        dto.setPaymentAmount(null);
        dto.setPaymentDate(null);
        dto.setHasFullPayment(false);
        dto.setHasDeposit(false);
    }
}

// ‚úÖ TH√äM: Customer confirm delivery method
@Transactional
public BookingDTO customerConfirmDelivery(Integer bookingId, Integer customerId) {
    try {
        logger.info("üîÑ Customer {} confirming delivery for booking {}", customerId, bookingId);
        
        // Validate booking exists and belongs to customer
        Optional<Booking> bookingOpt = bookingRepository.findById(bookingId);
        if (bookingOpt.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId);
        }
        
        Booking booking = bookingOpt.get();
        
        // Check ownership
        if (!booking.getCustomer().getId().equals(customerId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n booking n√†y");
        }
        
        // Check booking status
        if (!"delivered".equals(booking.getStatus().getStatusName())) {
            throw new RuntimeException("Booking ph·∫£i ·ªü tr·∫°ng th√°i 'confirmed' ƒë·ªÉ x√°c nh·∫≠n nh·∫≠n xe");
        }
        
        // Check supplier has confirmed delivery
        if (!booking.getSupplierDeliveryConfirm()) {
            throw new RuntimeException("Supplier ch∆∞a x√°c nh·∫≠n giao xe");
        }
        
        // Check customer hasn't confirmed yet
        if (booking.getCustomerReceiveConfirm()) {
            throw new RuntimeException("B·∫°n ƒë√£ x√°c nh·∫≠n nh·∫≠n xe tr∆∞·ªõc ƒë√≥");
        }

        // Check payment status
        List<Payment> payments = paymentRepository.findByBookingIdAndIsDeleted(bookingId, false);
        boolean hasFullPayment = payments.stream()
            .anyMatch(p -> "full_payment".equals(p.getPaymentType()));
        
        if (!hasFullPayment) {
            throw new RuntimeException("Ch∆∞a thanh to√°n ƒë·∫ßy ƒë·ªß ƒë·ªÉ nh·∫≠n xe");
        }
        
        // Update booking
        booking.setCustomerReceiveConfirm(true);
        booking.setDeliveryConfirmTime(Instant.now());
        
        // Change status to 'in progress'
        Optional<Status> inProgressStatus = statusRepository.findByStatusName("in progress");
        if (inProgressStatus.isEmpty()) {
            // ‚úÖ Fallback: s·ª≠ d·ª•ng status ID tr·ª±c ti·∫øp
            inProgressStatus = statusRepository.findById(3); // Assuming in progress has ID = 3
        }
        if (inProgressStatus.isEmpty()) {
            // ‚úÖ List all statuses ƒë·ªÉ debug
            List<Status> allStatuses = statusRepository.findAll();
            logger.error("‚ùå Available statuses: {}", 
                allStatuses.stream().map(Status::getStatusName).collect(Collectors.toList()));
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y status 'in progress' trong h·ªá th·ªëng");
        }
        logger.info("‚úÖ Found status: {} with ID: {}", inProgressStatus.get().getStatusName(), inProgressStatus.get().getId());
        booking.setStatus(inProgressStatus.get());
        booking.setUpdatedAt(Instant.now());
        bookingRepository.save(booking);
        
        logger.info("‚úÖ Customer confirmed delivery for booking {}", bookingId);
        
        Booking savedBooking = bookingRepository.save(booking);
        logger.info("‚úÖ Booking saved with new status: {} (ID: {})", 
            savedBooking.getStatus().getStatusName(), savedBooking.getStatus().getId());
        
        // ‚úÖ Return updated booking DTO
        BookingDTO result = findByIdWithDetails(bookingId);
        logger.info("‚úÖ Final result status: {}", result.getStatusName());
        
        return result;
        
    } catch (Exception e) {
        logger.error("‚ùå Error in customerConfirmDelivery: {}", e.getMessage(), e);
        throw new RuntimeException("Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n xe: " + e.getMessage());
    }
}

// ‚úÖ TH√äM: Customer confirm return method
@Transactional
public BookingDTO customerConfirmReturn(Integer bookingId, Integer customerId) {
    try {
        logger.info("üîÑ Customer {} confirming return for booking {}", customerId, bookingId);
        
        // Validate booking exists and belongs to customer
        Optional<Booking> bookingOpt = bookingRepository.findById(bookingId);
        if (bookingOpt.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId);
        }
        
        Booking booking = bookingOpt.get();
        
        // Check ownership
        if (!booking.getCustomer().getId().equals(customerId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n booking n√†y");
        }
        
        // Check booking status
        if (!"in progress".equals(booking.getStatus().getStatusName())) {
            throw new RuntimeException("Booking ph·∫£i ·ªü tr·∫°ng th√°i 'in progress' ƒë·ªÉ x√°c nh·∫≠n tr·∫£ xe");
        }
        
        // Check customer hasn't confirmed return yet
        if (booking.getCustomerReturnConfirm()) {
            throw new RuntimeException("B·∫°n ƒë√£ x√°c nh·∫≠n tr·∫£ xe tr∆∞·ªõc ƒë√≥");
        }
        
        // Update booking
        booking.setCustomerReturnConfirm(true);
        booking.setReturnConfirmTime(Instant.now());
        booking.setUpdatedAt(Instant.now());
        
        bookingRepository.save(booking);
        
        logger.info("‚úÖ Customer confirmed return for booking {}", bookingId);
        
        // Return updated booking DTO
        return findByIdWithDetails(bookingId);
        
    } catch (Exception e) {
        logger.error("‚ùå Error in customerConfirmReturn: {}", e.getMessage(), e);
        throw new RuntimeException("Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫£ xe: " + e.getMessage());
    }
}
// ‚úÖ TH√äM: Supplier confirm return method
@Transactional
public BookingDTO supplierConfirmReturn(Integer bookingId, Integer supplierId) {
    try {
        logger.info("üîÑ Supplier {} confirming return for booking {}", supplierId, bookingId);
        
        // Validate booking exists
        Optional<Booking> bookingOpt = bookingRepository.findById(bookingId);
        if (bookingOpt.isEmpty()) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId);
        }
        
        Booking booking = bookingOpt.get();
        
        // Check booking status
        if (!"in progress".equals(booking.getStatus().getStatusName())) {
            throw new RuntimeException("Booking ph·∫£i ·ªü tr·∫°ng th√°i 'in progress' ƒë·ªÉ x√°c nh·∫≠n tr·∫£ xe");
        }
        
        // Check customer ƒë√£ tr·∫£ xe
        if (!booking.getCustomerReturnConfirm()) {
            throw new RuntimeException("Customer ch∆∞a x√°c nh·∫≠n tr·∫£ xe");
        }
        
        // Check supplier ch∆∞a confirm
        if (booking.getSupplierReturnConfirm()) {
            throw new RuntimeException("Supplier ƒë√£ x√°c nh·∫≠n tr·∫£ xe tr∆∞·ªõc ƒë√≥");
        }
        
        // Update booking
        booking.setSupplierReturnConfirm(true);
        booking.setReturnConfirmTime(Instant.now());
        
        // ‚úÖ QUAN TR·ªåNG: ƒê·ªïi status th√†nh "completed"
        Optional<Status> completedStatus = statusRepository.findByStatusName("completed");
        if (completedStatus.isEmpty()) {
            // Fallback: s·ª≠ d·ª•ng status ID
            completedStatus = statusRepository.findById(4); // Assuming completed has ID = 4
        }
        
        if (completedStatus.isPresent()) {
            booking.setStatus(completedStatus.get());
            logger.info("‚úÖ Booking status changed to: {}", completedStatus.get().getStatusName());
        } else {
            logger.error("‚ùå Status 'completed' not found in system");
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y status 'completed' trong h·ªá th·ªëng");
        }
        
        booking.setUpdatedAt(Instant.now());
        
        // Save booking
        Booking savedBooking = bookingRepository.save(booking);
        logger.info("‚úÖ Supplier confirmed return for booking {} - Status: {}", 
            bookingId, savedBooking.getStatus().getStatusName());
        
        return findByIdWithDetails(bookingId);
        
    } catch (Exception e) {
        logger.error("‚ùå Error in supplierConfirmReturn: {}", e.getMessage(), e);
        throw new RuntimeException("Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫£ xe: " + e.getMessage());
    }
}
// ‚úÖ S·ª¨A: Method ƒë·ªÉ l·∫•y payment details cho booking s·ª≠ d·ª•ng PaymentDTO
// ‚úÖ S·ª¨A: Method ƒë∆°n gi·∫£n h√≥a - kh√¥ng c·∫ßn t√≠nh total
public List<PaymentDTO> getBookingPaymentDetails(Integer bookingId) {
    try {
        logger.info("üîç Getting payment details for booking: {}", bookingId);
        
        List<Payment> payments = paymentRepository.findByBookingIdAndIsDeleted(bookingId, false);
        
        return payments.stream()
            .map(payment -> {
                PaymentDTO dto = new PaymentDTO();
                dto.setPaymentId(payment.getId());
                dto.setBookingId(payment.getBooking().getId());
                dto.setAmount(payment.getAmount());
                dto.setCurrency(payment.getRegion().getCurrency());
                dto.setTransactionId(payment.getTransactionId());
                dto.setPaymentMethod(payment.getPaymentMethod());
                dto.setPaymentType(payment.getPaymentType());
                
                // ‚úÖ TH√äM: Set cash confirmation fields
                dto.setCustomerCashConfirmed(payment.getCustomerCashConfirmed());
                dto.setSupplierCashConfirmed(payment.getSupplierCashConfirmed());
                
                if (payment.getPaymentDate() != null) {
                    dto.setPaymentDate(LocalDateTime.ofInstant(
                        payment.getPaymentDate(), 
                        ZoneId.systemDefault()
                    ));
                }
                
                if (payment.getPaymentStatus() != null) {
                    dto.setStatusName(payment.getPaymentStatus().getStatusName());
                }
                
                return dto;
            })
            .sorted(Comparator.comparing(PaymentDTO::getPaymentDate, Comparator.nullsLast(Comparator.naturalOrder())))
            .collect(Collectors.toList());
            
    } catch (Exception e) {
        logger.error("‚ùå Error getting payment details for booking {}: {}", bookingId, e.getMessage());
        return new ArrayList<>();
    }
}

    public List<BookingDTO> findRecentBookings(int size) {
        return bookingRepository.findAllByIsDeletedFalseOrderByBookingDateDesc(PageRequest.of(0, size))
                .stream()
                .map(bookingMapper::toDTO)
                .collect(Collectors.toList());
    }

    public Integer getNextBookingId() {
        return bookingRepository.getNextBookingId();
    }

    public List<UserDTO> findRecentBookingUsers(int size) {
        return bookingRepository.findRecentBookingUsers(PageRequest.of(0, size))
                .stream()
                .map(userMapper::toDto)
                .collect(Collectors.toList());
    }

    // Scheduled job: X√≥a booking failed qu√° 1 ng√†y
    @Scheduled(cron = "0 0 3 * * *") // ch·∫°y m·ªói ng√†y l√∫c 3h s√°ng
    public void deleteFailedBookingsOlderThanOneDay() {
        logger.info("[Scheduled] ƒêang ki·ªÉm tra v√† x√≥a booking failed qu√° 1 ng√†y...");
        Status failedStatus = statusRepository.findByStatusName("failed").orElse(null);
        if (failedStatus == null) return;
        LocalDateTime oneDayAgo = LocalDateTime.now().minusDays(1);
        List<Booking> failedBookings = bookingRepository.findByStatusAndCreatedAtBeforeAndIsDeletedFalse(failedStatus, oneDayAgo);
        for (Booking booking : failedBookings) {
            // X√≥a payment li√™n quan
            List<Payment> payments = paymentRepository.findActivePaymentsByBookingId(booking.getId());
            for (Payment payment : payments) {
                paymentRepository.delete(payment);
            }
            // G·ª≠i email cho user
            try {
                String email = booking.getCustomer().getEmail();
                String subject = "ƒê∆°n ƒë·∫∑t xe th·∫•t b·∫°i ƒë√£ b·ªã x√≥a";
                String content = "Ch√†o " + booking.getCustomer().getUsername() + ",\n\n" +
                        "ƒê∆°n ƒë·∫∑t xe #" + booking.getId() + " ƒë√£ b·ªã x√≥a kh·ªèi h·ªá th·ªëng do kh√¥ng thanh to√°n th√†nh c√¥ng trong v√≤ng 24h.\n" +
                        "N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá RentCar.";
                        emailService.sendEmail(email, subject, content);      
                logger.info("[Scheduled] Sending email to {}: {}", email, subject);
            } catch (Exception e) {
                logger.warn("[Scheduled] Kh√¥ng g·ª≠i ƒë∆∞·ª£c email th√¥ng b√°o x√≥a booking: {}", booking.getId());
            }
            // Log audit
            logger.info("[Scheduled] [AUDIT] Booking {} deleted by system at {} (auto cleanup)", booking.getId(), LocalDateTime.now());
            bookingRepository.delete(booking);
            logger.info("[Scheduled] ƒê√£ x√≥a c·ª©ng booking failed: {}", booking.getId());
        }

    }

    public void deleteAllPaymentsForBooking(Integer bookingId) {
        List<Payment> payments = paymentRepository.findActivePaymentsByBookingId(bookingId);
        for (Payment payment : payments) {
            paymentRepository.delete(payment);
        }
    }

    // Method for admin dashboard
    public long count() {
        return bookingRepository.count();
    }

    public BigDecimal calculateTotalRevenue() {
        return bookingRepository.calculateTotalRevenue();
    }

     public BookingDTO getBookingDTOWithPaymentInfo(Booking booking) {
        // Chuy·ªÉn entity sang DTO
        BookingDTO dto = bookingMapper.toDTO(booking);
        
        // Enrich v·ªõi payment information
        enrichWithPaymentInfo(dto, booking.getId());
        
        return dto;
    }
    
    /**
     * Enrich BookingDTO with payment information
     */
    private void enrichWithPaymentInfo(BookingDTO dto, Integer bookingId) {
        List<Payment> payments = paymentRepository.findActivePaymentsByBookingId(bookingId);
        List<PaymentDTO> paymentDTOs = payments.stream().map(payment -> {
            PaymentDTO dtoPayment = new PaymentDTO();
            dtoPayment.setPaymentId(payment.getId());
            dtoPayment.setBookingId(payment.getBooking().getId());
            dtoPayment.setAmount(payment.getAmount());
            dtoPayment.setCurrency(payment.getRegion().getCurrency());
            dtoPayment.setTransactionId(payment.getTransactionId());
            dtoPayment.setPaymentMethod(payment.getPaymentMethod());
            dtoPayment.setPaymentType(payment.getPaymentType());
            dtoPayment.setPaymentDate(LocalDateTime.ofInstant(payment.getPaymentDate(), ZoneId.systemDefault()));
            dtoPayment.setStatusName(payment.getPaymentStatus().getStatusName());
            dtoPayment.setCustomerCashConfirmed(payment.getCustomerCashConfirmed());
            dtoPayment.setSupplierCashConfirmed(payment.getSupplierCashConfirmed());
            return dtoPayment;
        }).toList();
        dto.setPaymentDetails(paymentDTOs);
        // T·ªïng h·ª£p c√°c flag
        boolean hasFullPayment = paymentDTOs.stream().anyMatch(
            p -> "full_payment".equals(p.getPaymentType()) && "paid".equals(p.getStatusName())
        );
        dto.setHasFullPayment(hasFullPayment);

        boolean customerCashPaymentConfirmed = paymentDTOs.stream().anyMatch(
            p -> ("deposit".equals(p.getPaymentType()) || "full_payment".equals(p.getPaymentType()))
                && Boolean.TRUE.equals(p.getCustomerCashConfirmed())
        );
        dto.setCustomerCashPaymentConfirmed(customerCashPaymentConfirmed);

        boolean supplierCashPaymentConfirmed = paymentDTOs.stream().anyMatch(
            p -> "full_payment".equals(p.getPaymentType()) && Boolean.TRUE.equals(p.getSupplierCashConfirmed())
        );
        dto.setSupplierCashPaymentConfirmed(supplierCashPaymentConfirmed);

        boolean hasCashDepositPending = paymentDTOs.stream().anyMatch(
            p -> "deposit".equals(p.getPaymentType()) && "cash".equals(p.getPaymentMethod())
                && "pending".equals(p.getStatusName()) && !Boolean.TRUE.equals(p.getCustomerCashConfirmed())
        );
        dto.setHasCashDepositPending(hasCashDepositPending);

        // T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n
        BigDecimal totalPaid = paymentDTOs.stream()
            .filter(p -> "paid".equals(p.getStatusName()))
            .map(PaymentDTO::getAmount)
            .filter(Objects::nonNull)
            .reduce(BigDecimal.ZERO, BigDecimal::add);
        dto.setTotalPaidAmount(totalPaid);
        // N·∫øu ƒë√£ full payment, set totalPaidAmount = totalAmount
        if (hasFullPayment && dto.getTotalAmount() != null && dto.getTotalAmount().compareTo(BigDecimal.ZERO) > 0) {
            dto.setTotalPaidAmount(dto.getTotalAmount());
        }
        // N·∫øu totalAmount ch∆∞a c√≥, l·∫•y t·ª´ priceBreakdown.total ho·∫∑c sum c√°c payment
        if (dto.getTotalAmount() == null || dto.getTotalAmount().compareTo(BigDecimal.ZERO) == 0) {
            if (dto.getPriceBreakdown() != null && dto.getPriceBreakdown().getTotal() != null) {
                dto.setTotalAmount(dto.getPriceBreakdown().getTotal());
            } else {
                BigDecimal sum = paymentDTOs.stream().map(PaymentDTO::getAmount).filter(Objects::nonNull).reduce(BigDecimal.ZERO, BigDecimal::add);
                dto.setTotalAmount(sum);
            }
        }
        // Set paymentStatus, paymentType cho booking
        if (hasFullPayment) {
            dto.setPaymentStatus("paid");
            dto.setPaymentType("full_payment");
        } else if (customerCashPaymentConfirmed) { // Use customerCashPaymentConfirmed
            dto.setPaymentStatus("deposit_paid");
            dto.setPaymentType("deposit");
        } else {
            dto.setPaymentStatus("pending");
            dto.setPaymentType(null);
        }
    }

    /**
     * Enrich BookingDTO with car condition report information
     */
    private void enrichWithCarReportInfo(BookingDTO dto, Integer bookingId) {
        try {
            Long bookingIdLong = bookingId.longValue();
            
            // Check if pickup report exists
            Optional<CarConditionReport> pickupReport = carConditionReportRepository
                .findByBookingAndType(bookingIdLong, CarConditionReport.ReportType.PICKUP);
            dto.setHasPickupReport(pickupReport.isPresent());
            
            // Check if return report exists  
            Optional<CarConditionReport> returnReport = carConditionReportRepository
                .findByBookingAndType(bookingIdLong, CarConditionReport.ReportType.RETURN);
            dto.setHasReturnReport(returnReport.isPresent());
            
            logger.debug("üîç Booking {} - hasPickupReport: {}, hasReturnReport: {}", 
                bookingId, dto.getHasPickupReport(), dto.getHasReturnReport());
                
        } catch (Exception e) {
            logger.error("‚ùå Error enriching car report info for booking {}: {}", bookingId, e.getMessage());
            // Set default values if error occurs
            dto.setHasPickupReport(false);
            dto.setHasReturnReport(false);
        }
    }

}
